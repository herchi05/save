#!/usr/bin/env node
var ri=Object.defineProperty;var r=(t,o)=>ri(t,"name",{value:o,configurable:!0});import"tsconfig-paths/register.js";import"dotenv/config";import{Command as Nd}from"commander";var be="4.7.4";var Ue={name:"@epics-dao/solv",version:be,description:"Solana Validator CLI SOLV",main:"dist/index.js",type:"module",repository:"https://github.com/EpicsDAO/solv",keywords:["solana","validator","cli","validator-tool","Node.js","web3"],files:["dist"],author:"ELSOUL LABO B.V.",private:!1,license:"Apache-2.0",bin:{solv:"./dist/index.js"},scripts:{test:"vitest",build:"tsup src/index.ts && npx tsx add-line.ts",dev:"nodemon",start:"node dist/index.js"},dependencies:{"@jup-ag/api":"6.0.27","@metaplex-foundation/mpl-token-metadata":"3.2.1","@metaplex-foundation/umi":"0.9.2","@metaplex-foundation/umi-bundle-defaults":"0.9.2","@skeet-framework/utils":"1.3.11","@solana/spl-stake-pool":"1.1.5","@solana/spl-token":"0.4.8","@solana/web3.js":"1.95.3","bigint-buffer":"1.1.5","bn.js":"5.2.1",bs58:"6.0.0",chalk:"5.3.0","chalk-pipe":"6.1.0","cli-progress":"3.12.0","cli-spinner":"0.2.10","cli-table3":"0.6.5",commander:"12.1.0",dotenv:"16.4.5",inquirer:"10.2.0","node-fetch":"3.3.2",prompt:"1.3.0","tsconfig-paths":"^4.2.0"},devDependencies:{"@changesets/changelog-github":"0.5.0","@changesets/cli":"2.27.7","@solana-developers/helpers":"^2.5.6","@swc/core":"1.7.21","@types/bn.js":"5.1.5","@types/cli-progress":"3.11.6","@types/cli-spinner":"0.2.3","@types/inquirer":"9.0.7","@types/node":"22.5.1","@types/node-fetch":"2.6.11","@types/prompt":"1.1.8","@typescript-eslint/eslint-plugin":"8.3.0","@typescript-eslint/parser":"8.3.0",eslint:"9.9.1","eslint-config-prettier":"9.1.0",nodemon:"3.1.7",prettier:"3.3.3",tsup:"8.2.4",typescript:"5.5.4",vite:"5.4.2","vite-tsconfig-paths":"5.0.1",vitest:"2.0.5"}};var lo=Ue.version;var Ht="https://validators.solutions";var mo="solv4.config.json";var ut="identity.json",ft="unstaked-identity.json",Me="relayer-keypair.json",si="mainnet-validator-keypair.json",ai="mainnet-vote-account-keypair.json",ii="mainnet-authority-keypair.json",ci="testnet-validator-keypair.json",li="testnet-vote-account-keypair.json",mi="testnet-authority-keypair.json",C="/home/solv",O=`${C}/${ut}`,Id=`${C}/${ft}`,D=`${C}/${si}`,po=`${C}/${ai}`,Ld=`${C}/${ii}`,I=`${C}/${ci}`,He=`${C}/${li}`,Pd=`${C}/${mi}`,G=`${C}/solana-validator.log`,z=C+"/start-validator.sh",y="/mnt/ledger",W="/mnt/accounts",Fe="solana-validator",Ye="agave-validator",je="ELLB9W7ZCwRCV3FzWcCWoyKP6NjZJKArLyGtkqefnHcG";var uo=3,Be="https://api.testnet.solana.com",Je="https://api.mainnet-beta.solana.com",Ge="https://verify.validators.solutions/solv-migrate",ze="https://jup.validators.solutions/v1/jup",ae;(function(t){t.SOL="SOL",t.USDC="USDC",t.elSOL="elSOL",t.JitoSOL="JitoSOL",t.mSOL="mSOL",t.bSOL="bSOL",t.EPCT="EPCT",t.JUP="JUP",t.BONK="BONK",t.JTO="JTO"})(ae||(ae={}));var We=Object.values(ae),fo="So11111111111111111111111111111111111111112",ho="EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",ie="ELSoL1owwMWQ9foMsutweCsMKbTPVBD9pFqxQGidTaMC";var qe="SOLV420",Qe={So11111111111111111111111111111111111111112:"4Vwkpk3DTVrTGnUQTazsgQ1wxtU9QwZTmAXDaQRHg9Ra",EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v:"J8sqx9ZEoPRqboFAXK3c1R38zm41tRNJgUn2FzyeYQDj",J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn:"HPj87TFMPZfm5nk1HmTH9a382RXn7h9oWftiFr3Xs12a",mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So:"8CX5tE9KvJ59HcoXwWf6tCZoRuz2JFSmunnbKC1ryaK9",bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1:"782MdvLby3VfvKdfDYn9tX3DfNAtg7TcytNNFuepcoMH",CvB1ztJvpYQPvdPBePtRzjL4aQidjydtUz61NWgcgQtP:"BhR2L6J5q3xF1TxReXyHjaUh4MF6qV99tMsipzPAKeB",JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN:"212yg3Ev7khq4p1mESFGenF4nWefmkbC8f7mHM68j4vg",DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263:"61Ndjv9392jPRVGALdYgjjxGYa6TT6Gn2WLDSsmugE6U",jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL:"2c9qVh8RQ6j2E2VdAEcCrRXMrd6g1vvPNZvAR6sbaGWo"};import{spawnSync as Si}from"child_process";import{spawnSync as pi}from"node:child_process";var di=r(t=>{pi(`sh -c "$(curl -sSfL https://release.anza.xyz/v${t}/install)"`,{shell:!0,stdio:"inherit"})},"installAgave"),Nt=di;import{spawnSync as ui}from"node:child_process";var fi=r(()=>{let{stdout:t}=ui("solana --version",{shell:!0});return(t?String(t):"Unknown").trim()},"getSolanaVersion"),Ot=fi;var Xe="solana-validator",hi="agave-validator",yi=r(()=>{try{return Ot().includes("2.0")?hi:Xe}catch(t){return console.error(t),Xe}},"getSolanaCLI"),K=yi;var yo=r(async t=>{Nt(t)},"updateVersion"),ce=r(async(t,o=!1)=>{let e=K(),n=`${e} --ledger ${y} exit --max-delinquent-stake ${t} --monitor`;o&&(n=`${e} --ledger ${y} exit --max-delinquent-stake ${t}`),Si(n,{shell:!0,stdio:"inherit"})},"monitorUpdate");import Ur from"chalk";var ht;(function(t){t.EN="en",t.JA="ja"})(ht||(ht={}));var Ze;(function(t){t[t.DOUBLE=0]="DOUBLE",t[t.SINGLE=1]="SINGLE"})(Ze||(Ze={}));var tr;(function(t){t.SINGLE="single",t.DOUBLE="double"})(tr||(tr={}));var ct;(function(t){t.MAINNET="mainnet-beta",t.TESTNET="testnet"})(ct||(ct={}));var or;(function(t){t.VALIDATOR="validator",t.RPC="rpc"})(or||(or={}));var er;(function(t){t.SOLANA="solana",t.JITO="jito",t.AGAVE="agave",t.FIREDANCER="firedancer"})(er||(er={}));var rr;(function(t){t.CO_HOST_RELAYER="co-host-relayer",t.SEPARATED_RELAYER="separated-relayer",t.WITHOUT_RELAYER="without-relayer"})(rr||(rr={}));var nr;(function(t){t.FIREDANCER="firedancer",t.FRANKENDANCER="frankendancer"})(nr||(nr={}));var So;(function(t){t[t.TESTNET_VALIDATOR=0]="TESTNET_VALIDATOR",t[t.MAINNET_VALIDATOR=1]="MAINNET_VALIDATOR",t[t.RPC_NODE=2]="RPC_NODE"})(So||(So={}));var To;(function(t){t.SOLANA_CLIENT="SolanaClient",t.JITO_MEV="JitoMev",t.FIREDANCER="Firedancer"})(To||(To={}));var ir=!1,cr=!1,M={ID:"solv",LANG:ht.EN,USERNAME:"solv",TESTNET_SOLANA_VERSION:"2.0.8",MAINNET_SOLANA_VERSION:"1.18.23",NODE_VERSION:"20.17.0",TESTNET_DELINQUENT_STAKE:5,MAINNET_DELINQUENT_STAKE:5,COMMISSION:5,SOLANA_NETWORK:"testnet",SOLV_TYPE:0,DISK_TYPES:1,IS_SETUP:!1,LANG_SETUP:!1,DEFAULT_VALIDATOR_VOTE_ACCOUNT_PUBKEY:"ELLB9W7ZCwRCV3FzWcCWoyKP6NjZJKArLyGtkqefnHcG",IS_CLIENT:!1,VALIDATOR_IPS:[],MAINNET_TYPE:"SolanaClient",LEDGER_PATH:"/mnt/ledger",STAKE_ACCOUNT:[],HARVEST_ACCOUNT:"",IS_MEV_MODE:!1,RPC_URL:"https://mainnet-beta.solana.com",KEYPAIR_PATH:"/home/solv/testnet-validator-keypair.json",DISCORD_WEBHOOK_URL:"",AUTO_UPDATE:!1,AUTO_RESTART:!1},b={ROOT:"/home/solv",AUTHORIZED_KEYS:"/home/solv/.ssh/authorized_keys"},v={ROOT:"/mnt",ACCOUNTS:"/mnt/accounts",LEDGER:"/mnt/ledger"},q={LOG:"solana-validator.log",STARTUP_SCRIPT:"start-validator.sh",CONFIG:"solv.config.json",JITO_CONFIG:"jito.config.json"},L={SOL_SERVICE:"/etc/systemd/system/solv.service",SOL_LOGROTATE:"/etc/logrotate.d/solana",SOL_SYSTEM_CONFIG21:"/etc/sysctl.d/21-solana-validator.conf",SOL_NOFILES_CONF:"/etc/security/limits.d/90-solana-nofiles.conf",SOL_SYSTEM_CONF:"/etc/systemd/system.conf",SOLANA_PATH:"/home/solv/.local/share/solana/install"},k={MAINNET_VALIDATOR_KEY:"mainnet-validator-keypair.json",MAINNET_VALIDATOR_VOTE_KEY:"mainnet-vote-account-keypair.json",MAINNET_VALITATOR_AUTHORITY_KEY:"mainnet-authority-keypair.json",TESTNET_VALIDATOR_KEY:"testnet-validator-keypair.json",TESTNET_VALIDATOR_VOTE_KEY:"testnet-vote-account-keypair.json",TESTNET_VALITATOR_AUTHORITY_KEY:"testnet-authority-keypair.json"},A=r((t=b.ROOT)=>{let o=t===b.ROOT?b.ROOT:t,e=`${o}/${k.MAINNET_VALIDATOR_KEY}`,n=`${o}/${k.MAINNET_VALIDATOR_VOTE_KEY}`,s=`${o}/${k.MAINNET_VALITATOR_AUTHORITY_KEY}`,a=`${o}/${k.TESTNET_VALIDATOR_KEY}`,i=`${o}/${k.TESTNET_VALIDATOR_VOTE_KEY}`,c=`${o}/${k.TESTNET_VALITATOR_AUTHORITY_KEY}`;return{mainnetValidatorKey:e,mainnetValidatorVoteKey:n,mainnetValidatorAuthorityKey:s,testnetValidatorKey:a,testnetValidatorVoteKey:i,testnetValidatorAuthorityKey:c}},"getAllKeyPaths"),lt=r((t=!0)=>{let o=t?`${b.ROOT}/${k.TESTNET_VALIDATOR_KEY}`:`${b.ROOT}/${k.MAINNET_VALIDATOR_KEY}`,e=t?`${b.ROOT}/${k.TESTNET_VALIDATOR_VOTE_KEY}`:`${b.ROOT}/${k.MAINNET_VALIDATOR_VOTE_KEY}`,n=`${b.ROOT}/${q.LOG}`,s=v.ACCOUNTS,a=v.LEDGER,i=`${b.ROOT}/${q.STARTUP_SCRIPT}`;return{identity:o,voteAccount:e,log:n,accounts:s,ledger:a,scriptPath:i}},"startupScriptPaths");var B="So1vW4Bm6ZURzJJHZy1JpsjoVY68z4cDgF4tTLwYMa5",le="7tAfLKgRVd9eywSQPuMbVNd51KGkaveZQuTjapL74Fwv",lr="EiwSTx1Z2uJATDut682U7xzzquFR4UpQJUij3wSxVoSV",mr=9,Q="ELSoL1owwMWQ9foMsutweCsMKbTPVBD9pFqxQGidTaMC",pr="So11111111111111111111111111111111111111112",dr="EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",ur="CvB1ztJvpYQPvdPBePtRzjL4aQidjydtUz61NWgcgQtP",sr;(function(t){t[t.ELSOL=Q]="ELSOL",t[t.SOL=pr]="SOL",t[t.USDC=dr]="USDC",t[t.EPCT=ur]="EPCT"})(sr||(sr={}));var ar;(function(t){t.V6_BASE_URL="https://quote-api.jup.ag/v6",t.V6_QUOTE_URL="https://quote-api.jup.ag/v6/quote",t.V6_SWAP_URL="https://quote-api.jup.ag/v6/swap"})(ar||(ar={}));var Qd={[pr]:9,[Q]:9,[dr]:6,[ur]:6},Eo="/home/solv/currentEpoch.json",me=.5,go="https://api.testnet.solana.com";import{spawnSync as pe}from"child_process";var fr=r(()=>{pe("pnpm add -g pnpm",{shell:!0,stdio:"inherit"});let t=M.NODE_VERSION;pe(`pnpm env use ${t} --global`,{shell:!0,stdio:"inherit"}),pe("pnpm add -g @epics-dao/solv",{shell:!0,stdio:"inherit"})},"updateSolv");var nt={version:"1.18.23",tag:"v1.18.23-jito",commissionBps:700,relayerUrl:"http://amsterdam.mainnet.relayer.jito.wtf:8100",blockEngineUrl:"https://amsterdam.mainnet.block-engine.jito.wtf",shredReceiverAddr:"74.118.140.240:1002"},de={Amsterdam:{BLOCK_ENGINE_URL:"https://amsterdam.mainnet.block-engine.jito.wtf",RELAYER_URL:"http://amsterdam.mainnet.relayer.jito.wtf:8100",SHRED_RECEIVER_ADDR:"74.118.140.240:1002"},Frankfurt:{BLOCK_ENGINE_URL:"https://frankfurt.mainnet.block-engine.jito.wtf",RELAYER_URL:"http://frankfurt.mainnet.relayer.jito.wtf:8100",SHRED_RECEIVER_ADDR:"145.40.93.84:1002"},NewYork:{BLOCK_ENGINE_URL:"https://ny.mainnet.block-engine.jito.wtf",RELAYER_URL:"http://ny.mainnet.relayer.jito.wtf:8100",SHRED_RECEIVER_ADDR:"141.98.216.96:1002"},Tokyo:{BLOCK_ENGINE_URL:"https://tokyo.mainnet.block-engine.jito.wtf",RELAYER_URL:"http://tokyo.mainnet.relayer.jito.wtf:8100",SHRED_RECEIVER_ADDR:"202.8.9.160:1002"},SaltLakeCity:{BLOCK_ENGINE_URL:"https://slc.mainnet.block-engine.jito.wtf",RELAYER_URL:"http://slc.mainnet.relayer.jito.wtf:8100",SHRED_RECEIVER_ADDR:"64.130.53.8:1002"}};import{spawnSync as Ti}from"child_process";var wo=r((t=nt.tag)=>{Ti(`sh -c "$(curl -sSfL https://release.jito.wtf/${t}/install)"`,{shell:!0,stdio:"inherit"})},"jitoUpdate");import{readFile as Ei,writeFile as gi}from"fs/promises";import{homedir as wi}from"os";var Ft=r(async t=>{let e=`${wi()}/${q.JITO_CONFIG}`,s={...JSON.parse(await Ei(e,"utf8")),...t},a=JSON.stringify(s,null,2);await gi(e,a),console.log(`Updated ${e} with new values.`)},"updateJitoSolvConfig");import{spawnSync as hr}from"child_process";import Ai from"inquirer";var yr=r((t,o=!0)=>{let e=o?"/home/solv/testnet-validator-keypair.json":"/home/solv/mainnet-validator-keypair.json",n=o?"/home/solv/testnet-vote-account-keypair.json":"/home/solv/mainnet-vote-account-keypair.json";hr(`solana config set --url ${o?"testnet":"mainnet-beta"} --keypair ${e}`,{shell:!0,stdio:"inherit"});let a=`solana vote-update-commission ${n} ${t} ${e} --keypair ${e}`;hr(a,{shell:!0,stdio:"inherit"})},"updateCommission"),Sr=r(async()=>await Ai.prompt([{type:"number",name:"commission",message:"Enter new commission",default:7}]),"updateCommissionAsk");import{execAsync as Yt}from"@skeet-framework/utils";import _i from"chalk";import Ni from"inquirer";var Tr=r(async()=>{let t=await Ni.prompt([{name:"ip",type:"input",message:"Enter your IP address to allow access to RPC NODE:",default:"1.2.3.4"}]);await Yt("sudo ufw delete allow 8899/udp"),await Yt("sudo ufw delete allow 8899/tcp"),await Yt(`sudo ufw allow from ${t.ip} to any port 8899 proto tcp`),await Yt(`sudo ufw allow from ${t.ip} to any port 8899 proto udp`),await Yt("sudo ufw reload"),console.log(_i.white("\u2714\uFE0F Firewall updated!"))},"updateFirewall");var Oi=r(()=>be,"getSolvVersion"),vt=Oi;import{readFile as ki,writeFile as Ci}from"fs/promises";import{existsAsync as Ii}from"@skeet-framework/utils";var ue;(function(t){t.EN="en",t.JA="ja"})(ue||(ue={}));var Ou=Object.values(ue),u;(function(t){t.MAINNET="mainnet-beta",t.TESTNET="testnet"})(u||(u={}));var Er=Object.values(u),T;(function(t){t.RPC="rpc",t.VALIDATOR="validator"})(T||(T={}));var gr=Object.values(T),E;(function(t){t.SOLANA="solana",t.AGAVE="agave",t.JITO="jito",t.FRANKENDANCER="frankendancer",t.NONE="none"})(E||(E={}));var vu=Object.values(E).filter(t=>t!=="none"),V;(function(t){t.AGAVE="agave",t.JITO="jito",t.NONE="none"})(V||(V={}));var wr=Object.values(V).filter(t=>t!=="none"),X;(function(t){t.SINGLE="single",t.DOUBLE="double"})(X||(X={}));var Z="2.0.15",tt="2.0.15",yt="2.0.15",jt="2.0.15",Ar="2.0.15",St="2.0.15";var _r="20.17.0";var Nr="0.113.20007";var Ri={NETWORK:u.TESTNET,NODE_TYPE:T.RPC,VALIDATOR_TYPE:E.NONE,RPC_TYPE:V.AGAVE,MNT_DISK_TYPE:X.SINGLE,TESTNET_SOLANA_VERSION:Z,MAINNET_SOLANA_VERSION:tt,NODE_VERSION:_r,TESTNET_DELINQUENT_STAKE:10,MAINNET_DELINQUENT_STAKE:5,COMMISSION:5,DEFAULT_VALIDATOR_VOTE_ACCOUNT_PUBKEY:je,STAKE_ACCOUNTS:[],HARVEST_ACCOUNT:"",IS_MEV_MODE:!1,RPC_URL:Je,KEYPAIR_PATH:"",DISCORD_WEBHOOK_URL:"",AUTO_UPDATE:!1,AUTO_RESTART:!1,IS_DUMMY:!1,API_KEY:""},st=Ri;import{homedir as Li}from"os";var Pi=r(async()=>{let o=`${Li()}/${mo}`;return await Ii(o)?JSON.parse(await ki(o,"utf-8")):(console.log("Creating default config file at",o),await Ci(o,JSON.stringify(st,null,2)),st)},"readConfig"),$=Pi;import xi from"node-fetch";var P=r(async t=>{try{let o=await $();if(o.DISCORD_WEBHOOK_URL==="")throw new Error(`DISCORD_WEBHOOK_URL is empty
Please set DISCORD_WEBHOOK_URL in .env`);let e={content:t,username:"\u{1FA84} Solv Notifier"};return(await xi(o.DISCORD_WEBHOOK_URL,{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}})).status===204}catch{return console.log({error:`Skeet sendDiscord Error - ${t}`}),!1}},"sendDiscord");import{spawnSync as bi}from"child_process";import{Connection as Or}from"@solana/web3.js";var Bt=r(async(t,o,e=!1,n=200)=>{let s={pubkey:o,isActive:!1,reason:""};try{let a=e?new Or("https://api.testnet.solana.com"):new Or(t,"confirmed"),i=await a.getVoteAccounts(),c=i.current.find(m=>m.votePubkey===o);if(!c)return i.delinquent.find(f=>f.votePubkey===o)?(s.isActive=!1,s.reason="Validator is delinquent.",s):(s.isActive=!1,s.reason="Validator is not found in both current and delinquent lists.",s);if(i=await a.getVoteAccounts(),c=i.current.find(m=>m.votePubkey===o),!c)return s.isActive=!1,s.reason="Validator is not found in the current list.",s;let l=c.lastVote,d=await a.getSlot()-l;return d>n?(s.isActive=!1,s.reason=`Validator has not voted for ${d} slots.`,s):(s.isActive=!0,s.reason="Validator is active and voting.",s)}catch(a){return console.error(a),s.isActive=!1,s.reason="Failed to check validator status.",s}},"isValidatorActive");import{spawnSync as Vi}from"child_process";var g=r(t=>{let o=`solana address --keypair ${t}`,{stdout:e}=Vi(o,{shell:!0,stdio:"pipe"});return e.toString().trim()},"getSolanaAddress");var $i=r(t=>new Promise(o=>setTimeout(o,t)),"sleep"),ot=$i;import{sendDiscord as Di}from"@skeet-framework/utils";var vr=60,Ki=r(async t=>{try{let o=t.NETWORK===u.TESTNET,{mainnetValidatorVoteKey:e,testnetValidatorVoteKey:n}=A(),a=g(o?n:e),i=await Bt(t.RPC_URL,a,o),c=0;for(;!i.isActive;){if(c>=vr){console.log("Max retries reached, exiting...");let l=`\u26A0\uFE0F Validator is not active for ${vr} minutes!
Account: ${i.pubkey}
Reason: ${i.reason}
Message: Max retries reached, exiting catchup check...
         Please check your validator node \u{1F477}\u200D\u2640\uFE0F`;return await Di(l),!1}console.log("Waiting for validator to catch up..."),await ot(60*1e3),i=await Bt(t.RPC_URL,a,o),c++}return!0}catch(o){return console.log("Error in waitCatchup:",o),!1}},"waitCatchup"),Rr=Ki;var Ui=r(async t=>{let o=t.NETWORK===u.MAINNET,{mainnetValidatorKey:e,testnetValidatorKey:n}=A(),s=o?e:n,a=Ot(),i=o?ir:cr;i=i&&t.AUTO_RESTART;let c=g(s),l=`=== \u2728 solv updated to the latest version \u2728 ===
Validator Address: ${c}
solv Version: ${vt()}
Solana Version: ${a}
Network: ${o?"Mainnet":"Testnet"}
isNodeRestartRequired: ${i}
`;if(await P(l),i){let p=`== \u23F3 Restarting the Node \u23F3 ==
Address: ${c}
This will take a few minutes to catch up...
\u203B sometimes it may take longer than expected    
`;await P(p);try{bi("solv update -b",{stdio:"inherit",shell:!0})}catch(f){let S=`\u274C Error in restarting the node
Address: ${c}
Error: ${f}`;return await P(S),!1}let d=`== \u{1F646} Your Node has been restarted! ==
Address: ${c}
Now Catching up... \u{1F69B}\u{1F4A8}
`;await P(d),await ot(180*1e3);let m=await Rr(t);if(m){let f=`== \u{1F7E2} Your Node has caught up! ==
Address: ${c}
\u2728 Auto Update Completed \u2728
`;await P(f)}return m}return!0},"autoUpdate"),kr=Ui;import{homedir as Mi}from"os";import{readFile as Hi,writeFile as Cr}from"fs/promises";import{existsAsync as Fi}from"@skeet-framework/utils";var R=r(async t=>{let e=`${Mi()}/${mo}`;await Fi(e)||(console.log("Creating default config file at",e),await Cr(e,JSON.stringify(st,null,2)));let s={...JSON.parse(await Hi(e,"utf8")),...t},a=JSON.stringify(s,null,2);await Cr(e,a)},"updateDefaultConfig");var Yi={description:"\u{1F48E} Solana Validator All-in-One CLI \u{1F48E}",version:"Output the current version",help:"Display help for solv commands",subcmdHelp:"Display help for subcommands",server:"Open solv Dashboard",start:"Start Solana Validator",stop:"Stop Solana Validator",status:"Show Solana Validator Status",restart:"Restart Solana Validator",update:"Update Solana Validator Version",get:"Get Solana Validator Info Commands",log:"Tail Solana Validator Log",catchup:"Catchup Solana Validator",monitor:"Monitor Solana Validator",config:"Show Solana Validator Config",install:"Install/Update Solana Version",stake:"Solana Delegate Stake",check:"Check Solana Validator",scp:"Download/Upload Solana Validator Keypairs",cron:"Run Schedule Tasks",setup:"Setup Solana Validator",epoch:"Show Current Epoch",slot:"Show Current Slot",solv:"Endroll Solv AA",installer:"Please select an option:",unstake:"UnStake"},Ao=Yi;var ji={description:"\u{1F48E} \u30BD\u30E9\u30CA\u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u30AA\u30FC\u30EB\u30A4\u30F3\u30EF\u30F3 CLI \u30C4\u30FC\u30EB \u{1F48E}",version:"\u73FE\u5728\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u3092\u51FA\u529B",help:"solv \u30B3\u30DE\u30F3\u30C9\u306E\u30AA\u30D7\u30B7\u30E7\u30F3\u8A73\u7D30\u3092\u8868\u793A",subcmdHelp:"\u30B5\u30D6\u30B3\u30DE\u30F3\u30C9\u306E\u30D8\u30EB\u30D7\u3092\u8868\u793A",server:"solv \u30C0\u30C3\u30B7\u30E5\u30DC\u30FC\u30C9\u3092\u958B\u304F",start:"\u30CE\u30FC\u30C9\u3092\u8D77\u52D5",stop:"\u30CE\u30FC\u30C9\u3092\u505C\u6B62",status:"\u30CE\u30FC\u30C9\u306E\u30B9\u30C6\u30FC\u30BF\u30B9\u3092\u8868\u793A",restart:"\u30CE\u30FC\u30C9\u3092\u518D\u8D77\u52D5",update:"\u30CE\u30FC\u30C9\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u3092\u66F4\u65B0",get:"\u30CE\u30FC\u30C9\u306E\u8A2D\u5B9A\u60C5\u5831\u3092\u53D6\u5F97 \u30B5\u30D6\u30B3\u30DE\u30F3\u30C9",log:"\u30CE\u30FC\u30C9\u306E\u30ED\u30B0\u3092\u8868\u793A",catchup:"\u30CE\u30FC\u30C9\u3092\u30AD\u30E3\u30C3\u30C1\u30A2\u30C3\u30D7",monitor:"\u30CE\u30FC\u30C9\u3092\u76E3\u8996",config:"\u30CE\u30FC\u30C9\u306E\u8A2D\u5B9A\u3092\u8868\u793A",install:"\u30BD\u30E9\u30CA\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u3092\u66F4\u65B0/\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB",stake:"\u30BD\u30E9\u30CA\u306E\u30B9\u30C6\u30FC\u30AD\u30F3\u30B0\u3092\u884C\u3046",unstake:"\u30BD\u30E9\u30CA\u306E\u30A2\u30F3\u30B9\u30C6\u30FC\u30AD\u30F3\u30B0\u3092\u884C\u3046",check:"\u30CE\u30FC\u30C9\u306E\u72B6\u614B\u3092\u30C1\u30A7\u30C3\u30AF",scp:"scp \u30B5\u30D6\u30B3\u30DE\u30F3\u30C9",cron:"\u30B9\u30B1\u30B8\u30E5\u30FC\u30EB\u30BF\u30B9\u30AF \u30B5\u30D6\u30B3\u30DE\u30F3\u30C9",setup:"\u30BD\u30E9\u30CA\u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u3092\u30BB\u30C3\u30C8\u30A2\u30C3\u30D7",epoch:"\u73FE\u5728\u306E\u30A8\u30DD\u30C3\u30AF\u3092\u8868\u793A",slot:"\u73FE\u5728\u306E\u30B9\u30ED\u30C3\u30C8\u3092\u8868\u793A",solv:"Solv\u30A8\u30F3\u30C9\u30ED\u30FC\u30EB AA \u3092\u8868\u793A",installer:"\u4EE5\u4E0B\u304B\u3089\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044:"},Ir=ji;var Bi={success:{created:"Created"},error:{failed:"Failed"},installer:{welcomeMsg:"\u{1F525} Welcome to the solv installer \u{1F525}",description:"solv is born and ready for running Solana Validator Nodes \u{1F680}"}},_o=Bi;var Ji={success:{created:"\u4F5C\u6210\u3055\u308C\u307E\u3057\u305F"},error:{failed:"\u5931\u6557\u3057\u307E\u3057\u305F"},installer:{welcomeMsg:"\u{1F525} \u30BD\u30E9\u30CA\u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u30C4\u30FC\u30EB solv \u3078\u3088\u3046\u3053\u305D \u{1F525}",description:"\u3042\u306A\u305F\u306F\u3082\u3046\u3001\u30BD\u30E9\u30CA\u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u306B\u306A\u308B\u6E96\u5099\u304C\u3067\u304D\u3066\u3044\u307E\u3059\u3002"}},Lr=Ji;var No=[") Upgrade - Update/Downgrade Solana Version",") Check Validator Logs/Status or Start/Stop",") Get Validator Config Info",") Backup Validator Keyfiles",") Staking",") Uninstall",") Exit"],Oo=[[],[") Check Validator Status",") Show Validator Logs",") Start Validator",") Stop Validator",") Restart Validator (no fetch snapshot)",") Restart Validator (fetch snapshot)",") Return to Main Menu"],[") Show Validator Config",") Register Validator Info",") Show Validator Keys Path/Address/Balance",") Get Current Epoch/Slot",") Get Solana Validator Catchup Info",") Get Solana Validator Monitor Info",") Return to Main Menu"],[") Backup Validator Keyfiles",") Set Validator Keyfile/Network",") Return to Main Menu"],[") Stake",") Unstake",") Return to Main Menu"],[],[]];var Pr=[") \u30A2\u30C3\u30D7\u30B0\u30EC\u30FC\u30C9 - Solana\u30D0\u30FC\u30B8\u30E7\u30F3\u306E\u30A2\u30C3\u30D7\u30C7\u30FC\u30C8/\u30C0\u30A6\u30F3\u30B0\u30EC\u30FC\u30C9",") \u30D0\u30EA\u30C7\u30FC\u30BF-\u306E\u72B6\u614B/\u30ED\u30B0\u3092\u78BA\u8A8D\u30FB\u307E\u305F\u306F\u958B\u59CB/\u505C\u6B62",") \u30D0\u30EA\u30C7\u30FC\u30BF-\u306E\u8A2D\u5B9A\u60C5\u5831",") \u9375\u306E\u8A2D\u5B9A",") \u30B9\u30C6\u30FC\u30AD\u30F3\u30B0",") \u30A2\u30F3\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB",") \u7D42\u4E86"],xr=[[],[") \u30D0\u30EA\u30C7\u30FC\u30BF-\u306E\u72B6\u614B\u3092\u78BA\u8A8D",") \u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u306E\u30ED\u30B0\u3092\u8868\u793A",") \u30D0\u30EA\u30C7\u30FC\u30BF-\u3092\u958B\u59CB",") \u30D0\u30EA\u30C7\u30FC\u30BF-\u3092\u505C\u6B62",") \u30D0\u30EA\u30C7\u30FC\u30BF-\u3092\u518D\u8D77\u52D5 (fetch snapshot \u306A\u3057)",") \u30D0\u30EA\u30C7\u30FC\u30BF-\u3092\u518D\u8D77\u52D5 (fetch snapshot \u3042\u308A)",") \u30E1\u30A4\u30F3\u30E1\u30CB\u30E5\u30FC\u306B\u623B\u308B"],[") \u30D0\u30EA\u30C7\u30FC\u30BF-\u306E\u8A2D\u5B9A\u3092\u898B\u308B",") \u30D0\u30EA\u30C7\u30FC\u30BF-\u60C5\u5831\u3092\u767B\u9332\u3059\u308B",") \u30D0\u30EA\u30C7\u30FC\u30BF-\u306E\u9375\u306E \u30D1\u30B9/\u30A2\u30C9\u30EC\u30B9/\u6B8B\u9AD8 \u3092\u898B\u308B",") \u73FE\u5728\u306E \u30A8\u30DD\u30C3\u30AF/\u30B9\u30ED\u30C3\u30C8 \u3092\u898B\u308B",") \u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u306E Catchup \u60C5\u5831\u3092\u898B\u308B",") \u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u306E\u30E2\u30CB\u30BF\u30FC\u60C5\u5831\u3092\u898B\u308B",") \u30E1\u30A4\u30F3\u30E1\u30CB\u30E5\u30FC\u306B\u623B\u308B"],[") \u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u306E\u9375\u3092\u30D0\u30C3\u30AF\u30A2\u30C3\u30D7",") \u9375/\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u3092\u8A2D\u5B9A\u3059\u308B",") \u30E1\u30A4\u30F3\u30E1\u30CB\u30E5\u30FC\u306B\u623B\u308B"],[") \u30B9\u30C6\u30FC\u30AD\u30F3\u30B0\u3092\u884C\u3046",") \u30A2\u30F3\u30B9\u30C6\u30FC\u30AD\u30F3\u30B0\u3092\u884C\u3046",") \u30E1\u30A4\u30F3\u30E1\u30CB\u30E5\u30FC\u306B\u623B\u308B"],[],[]];var Gi={server:{description:"Open solv Dashboard"},start:{description:"Start Solana Validator"},stop:{description:"Stop Solana Validator"},status:{description:"Show Solana Validator Status"},restart:{description:"Restart Solana Validator"},update:{description:"Update Solana Validator Version"},get:{description:"Get Solana Validator Info"},log:{description:"Tail Solana Validator Log"},catchup:{description:"Catchup Solana Validator"},monitor:{description:"Monitor Solana Validator"},config:{description:"Show Solana Validator Config"},install:{description:"Install/Update Solana Version"},stake:{description:"Solana Delegate Stake"},unstake:{description:"UnStake"},check:{description:"Check Solana Validator"},scp:{description:"Download/Upload Solana Validator Keypairs"},cron:{description:"Run Schedule Tasks"},setup:{description:"Setup Solana Validator"},epoch:{description:"Show Current Epoch"},slot:{description:"Show Current Slot"},solv:{description:"Endroll Solv AA"}},vo=Gi;var zi={server:{description:"Open solv Dashboard"},start:{description:"Start Solana Validator"},stop:{description:"Stop Solana Validator"},status:{description:"Show Solana Validator Status"},restart:{description:"Restart Solana Validator"},update:{description:"Update Solana Validator Version"},get:{description:"Get Solana Validator Info"},log:{description:"Tail Solana Validator Log"},catchup:{description:"Catchup Solana Validator"},monitor:{description:"Monitor Solana Validator"},config:{description:"Show Solana Validator Config"},install:{description:"Install/Update Solana Version"},stake:{description:"Solana Delegate Stake"},unstake:{description:"UnStake"},check:{description:"Check Solana Validator"},scp:{description:"Download/Upload Solana Validator Keypairs"},cron:{description:"Run Schedule Tasks"},setup:{description:"Setup Solana Validator"},epoch:{description:"Show Current Epoch"},slot:{description:"Show Current Slot"},solv:{description:"Endroll Solv AA"}},Vr=zi;var Ro=[") Check Validator Status",") Download Validator Keyfiles",") Generate Validator Keyfiles",") Upload Validator Keyfiles",") Set Validator Keyfile/Network",") Uninstall",") Exit"];var $r=[") \u30D0\u30EA\u30C7\u30FC\u30BF-\u306E\u72B6\u614B\u3092\u78BA\u8A8D",") \u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u306E\u9375\u3092\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",") \u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u306E\u9375\u3092\u4F5C\u6210",") \u30D0\u30EA\u30C7\u30FC\u30BF\u30FC\u306E\u9375\u3092\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9",") \u9375/\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u3092\u8A2D\u5B9A\u3059\u308B",") \u30A2\u30F3\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB",") \u7D42\u4E86"];var Wi=r(t=>{let o={cmds:Ao,subCmds:vo,logs:_o,installer:No,installerSub:Oo,clientCmds:Ro};switch(t){case ht.EN:o={cmds:Ao,subCmds:vo,logs:_o,installer:No,installerSub:Oo,clientCmds:Ro};break;case ht.JA:o={cmds:Ir,subCmds:Vr,logs:Lr,installer:Pr,installerSub:xr,clientCmds:$r};break;default:o={cmds:Ao,subCmds:vo,logs:_o,installer:No,installerSub:Oo,clientCmds:Ro}}return o},"readLocale"),Dr=Wi;import{existsSync as Zi,readFileSync as tc,writeFileSync as Kr}from"fs";import{readFileSync as qi,writeFileSync as Qi}from"fs";import{homedir as Xi}from"os";var Rt=r(t=>{let e=`${Xi()}/${q.CONFIG}`,s={...JSON.parse(qi(e,"utf8")),...t},a=JSON.stringify(s,null,2);Qi(e,a)},"updateSolvConfig");import{homedir as oc}from"os";var br=r(()=>{let o=`${oc()}/${q.CONFIG}`;Zi(o)||(Kr(o,JSON.stringify(M,null,2)),console.log(`Created default config file at ${o}`));let e;try{e=JSON.parse(tc(o,"utf-8"))}catch{console.log("Error parsing config file. Renewing config file."),Kr(o,JSON.stringify(M,null,2)),e=M}let n=Dr(e.LANG);return e.RPC_URL||(e.RPC_URL=M.RPC_URL,Rt({RPC_URL:M.RPC_URL})),e.IS_MEV_MODE===void 0&&(e.IS_MEV_MODE=!1,Rt({IS_MEV_MODE:!1})),e.DISCORD_WEBHOOK_URL||(e.DISCORD_WEBHOOK_URL="",Rt({DISCORD_WEBHOOK_URL:""})),{config:e,locale:n}},"readOrCreateDefaultConfig");var Mr=r(t=>{let o=t.NETWORK===u.TESTNET,e=t.NODE_TYPE===T.RPC,n=t.VALIDATOR_TYPE===E.JITO,s=o?Z:tt;n&&(s=jt,o&&(s=yt)),e&&(s=St,n&&(s=Ar)),h.command("update").alias("u").description("Update Command").option("-v, --version <version>",`Solana Version e.g ${s}`,s).option("-b, --background","No Monitor Delinquent Stake Update",!1).option("-c, --commission","Update Commission",!1).option("-f, --firewall","Update Firewall",!1).option("--migrate-config","Migrate Solv Config",!1).option("--config","Update Solv Config Default Solana Version",!1).option("--auto","Auto Update",!1).action(async a=>{let i=vt(),c=o?t.TESTNET_DELINQUENT_STAKE:t.MAINNET_DELINQUENT_STAKE;if(console.log(Ur.white(`Current solv version: ${i}`)),a.auto){await kr(t);return}if(a.migrateConfig){let l=br().config,p=l.SOLANA_NETWORK===ct.TESTNET,d=l.SOLV_TYPE===So.RPC_NODE,m=l.MAINNET_TYPE===To.JITO_MEV,f={NETWORK:p?u.TESTNET:u.MAINNET,NODE_TYPE:d?T.RPC:T.VALIDATOR,MNT_DISK_TYPE:l.DISK_TYPES===0?X.DOUBLE:X.SINGLE,RPC_TYPE:d?V.JITO:V.NONE,VALIDATOR_TYPE:m?E.JITO:p?E.AGAVE:E.SOLANA,TESTNET_SOLANA_VERSION:l.TESTNET_SOLANA_VERSION,MAINNET_SOLANA_VERSION:l.MAINNET_SOLANA_VERSION,NODE_VERSION:l.NODE_VERSION,TESTNET_DELINQUENT_STAKE:l.TESTNET_DELINQUENT_STAKE,MAINNET_DELINQUENT_STAKE:l.MAINNET_DELINQUENT_STAKE,COMMISSION:l.COMMISSION,DEFAULT_VALIDATOR_VOTE_ACCOUNT_PUBKEY:l.DEFAULT_VALIDATOR_VOTE_ACCOUNT_PUBKEY,STAKE_ACCOUNTS:l.STAKE_ACCOUNT,HARVEST_ACCOUNT:l.HARVEST_ACCOUNT,IS_MEV_MODE:l.IS_MEV_MODE,RPC_URL:l.RPC_URL,KEYPAIR_PATH:l.KEYPAIR_PATH,DISCORD_WEBHOOK_URL:l.DISCORD_WEBHOOK_URL,AUTO_UPDATE:l.AUTO_UPDATE,AUTO_RESTART:l.AUTO_RESTART,IS_DUMMY:!1,API_KEY:""};await R(f)}if(a.config){if(await R({TESTNET_SOLANA_VERSION:Z,MAINNET_SOLANA_VERSION:tt}),n){let l=o?yt:jt;await Ft({version:l,tag:`v${l}-jito`})}console.log(Ur.green("\u2714\uFE0F Updated Solv Config Default Solana Version\n\n You can now run `solv i` to install the latest version"));return}if(a.firewall){await Tr();return}if(a.background){let l=a.version;if(await R({TESTNET_SOLANA_VERSION:Z,MAINNET_SOLANA_VERSION:tt}),n){wo(),await Ft({version:l,tag:`v${l}-jito`}),await ce(c,!0);return}await yo(l),await ce(o?10:5,!0);return}else if(a.commission){let l=await Sr();yr(l.commission,o)}else fr()})},"updateCommands");import{spawnSync as ec}from"node:child_process";var Hr=r(t=>{try{let{log:o}=lt(),e=`tail -f ${o}`;t.error?e+=" | grep '\\(WARN\\|ERR\\)'":t.info?e+=" | grep INFO":t.warning&&(e+=" | grep WARN"),console.log(e);let n=ec(e,{shell:!0,stdio:"inherit"});if(n.error)throw n.error;n.signal==="SIGINT"?(console.log("Child process terminated due to receipt of SIGINT signal"),process.exit(0)):n.status!==0&&(console.error(`Child process exited with code ${n.status}`),process.exit(n.status))}catch(o){console.error(`tail Error: ${o}`),process.exit(1)}},"tail");var Fr=r(()=>{h.command("log").description("tail logs").alias("l").description("tail logs").option("-i, --info","Follow INFO output",!1).option("-w, --warning","Follow WARN output",!1).option("-e, --error","Follow ERR/WARN output",!1).option("-a, --all","Follow All output",!1).action(t=>{Hr(t)})},"logCommands");import at from"chalk";import{spawnSync as rc}from"child_process";import{homedir as nc}from"os";var ko=r(t=>{let o=nc(),e=A(o),n=e.testnetValidatorVoteKey,s=e.testnetValidatorKey,a=e.testnetValidatorAuthorityKey,i=ct.TESTNET,c=t.COMMISSION;t.NETWORK===u.MAINNET&&(n=e.mainnetValidatorVoteKey,s=e.mainnetValidatorKey,a=e.mainnetValidatorAuthorityKey,i=ct.MAINNET),console.log(`\u231B\uFE0F Creating vote account with commission ${c} - ${i}`);let l=t.RPC_URL||i;t.NETWORK===u.TESTNET&&(l=ct.TESTNET);let p=`solana create-vote-account ${n} ${s} ${a} --commission ${c} --url ${l} --keypair ${s}`;rc(p,{shell:!0,stdio:"inherit"})},"setupVoteAccount");import{spawnSync as Co}from"child_process";import{existsSync as Yr,readdirSync as sc,rmSync as ac}from"fs";import{homedir as ic}from"os";import jr from"path";var Io=r(t=>{let o=[],e=0;t.NODE_TYPE===T.RPC&&(o=[k.MAINNET_VALIDATOR_KEY],e=1),t.NETWORK===u.TESTNET?(o=[k.TESTNET_VALIDATOR_KEY,k.TESTNET_VALITATOR_AUTHORITY_KEY,k.TESTNET_VALIDATOR_VOTE_KEY,k.MAINNET_VALIDATOR_KEY,k.MAINNET_VALITATOR_AUTHORITY_KEY,k.MAINNET_VALIDATOR_VOTE_KEY],e=6):(o=[k.MAINNET_VALIDATOR_KEY,k.MAINNET_VALITATOR_AUTHORITY_KEY,k.MAINNET_VALIDATOR_VOTE_KEY],e=3);let n=`solana-keygen grind --starts-and-ends-with E:SV:${e}`;Co(n,{shell:!0,stdio:"ignore"});let s=sc("./").filter(l=>l.endsWith("SV.json")),a=ic(),i=jr.join(a,"unstaked-identity.json");Yr(i)&&Co(`mv ${i} ${a}/unstaked-identity.backup.json`,{shell:!0,stdio:"ignore"});let c=0;for(let l of s){let p=jr.join(a,o[c]);if(c++,Yr(p)){console.log(`${p} is already exist!`),ac(l,{recursive:!0});continue}let d=`mv ${l} ${p}`;Co(d,{shell:!0,stdio:"inherit"})}Co("solana-keygen new -s --no-bip39-passphrase -o /home/solv/unstaked-identity.json",{shell:!0,stdio:"ignore"}),console.log(`Generated keypairs - ${a}`)},"createSolvKeyPairs");import{spawnSync as Jr}from"child_process";var cc=r((t,o,e,n=2001)=>{let s="/etc/systemd/system/jupiter-api.service",a=`[Unit]
Description=Jupiter API Service Instance
After=network.target

[Service]
Type=simple
ExecStart=/home/solv/jupiter-swap-api --rpc-url ${t} --yellowstone-grpc-endpoint ${o} --yellowstone-grpc-x-token "${e}" --port ${n}
WorkingDirectory=/home/solv
Restart=always
User=solv
Environment=NODE_ENV=production
Environment=RUST_LOG=info
Environment=PATH=/home/solv/.local/share/solana/install/active_release/bin:/home/solv/.local/share/pnpm:/home/solv/.cargo/env:/home/solv/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/solv/.local/share/pnpm/npx

[Install]
WantedBy=multi-user.target`;return{filePath:s,body:a}},"jupiterAPIService"),Br=cc;import lc from"inquirer";import mc from"chalk";var pc=r(async()=>{let t=await lc.prompt([{name:"rpcUrl",message:"Enter RPC URL",type:"input",default:"http://localhost:8899"},{name:"grpcUrl",message:"Enter GRPC URL",type:"input",default:"http://localhost:10000"},{name:"grpcToken",message:"Enter GRPC Token",type:"input",default:"token"}]);Jr(`sudo apt-get install unzip wget -y
wget https://github.com/jup-ag/jupiter-swap-api/releases/download/v6.0.25/jupiter-swap-api-x86_64-unknown-linux-gnu.zip
unzip jupiter-swap-api-x86_64-unknown-linux-gnu.zip
chmod +x jupiter-swap-api
rm jupiter-swap-api-x86_64-unknown-linux-gnu.zip`,{shell:!0,stdio:"inherit"});let{filePath:e,body:n}=Br(t.rpcUrl,t.grpcUrl,t.grpcToken);Jr(`echo '${n}' | sudo tee ${e}`,{shell:!0,stdio:"inherit"}),console.log(mc.white(`\u{1F7E2} Jupiter Swap API Setup Completed

$ solv jupiter --help`))},"jupiterAPISetup"),Gr=pc;import{existsAsync as dc}from"@skeet-framework/utils";import{readFile as uc,writeFile as zr}from"fs/promises";import{homedir as fc}from"os";import hc from"path";var Tt=r(async()=>{let t=fc(),o=hc.join(t,q.JITO_CONFIG);await dc(o)||(await zr(o,JSON.stringify(nt,null,2)),console.log(`Created jito config file at ${o}`));let e;try{e=JSON.parse(await uc(o,"utf-8"))}catch(n){console.log(`readOrCreateJitoConfig - ${n}`),await zr(o,JSON.stringify(nt,null,2)),e=nt}return e},"readOrCreateJitoConfig");import{spawnSync as yc}from"child_process";var Jt=r(()=>{yc("sudo systemctl daemon-reload",{shell:!0,stdio:"inherit"})},"daemonReload");import Gt from"chalk";import Lo from"inquirer";import Sc from"inquirer";var Wr=r(async()=>{let o=Object.keys(de),e=await Sc.prompt([{name:"commissionBps",type:"number",message:"Enter commission bps",default:1e3},{name:"region",type:"list",message:"Select region",choices:o}]),n=e.region,s=de[n];return{version:nt.version,tag:nt.tag,commissionBps:e.commissionBps,blockEngineUrl:s.BLOCK_ENGINE_URL,relayerUrl:s.RELAYER_URL,shredReceiverAddr:s.SHRED_RECEIVER_ADDR}},"askJitoSetting");var Tc=r(async()=>{try{let t=E.NONE,o=V.AGAVE,e=st.COMMISSION,n=!1,s=await Lo.prompt([{name:"network",type:"list",message:"Choose Network",choices:Er,default:u.MAINNET},{name:"nodeType",type:"list",message:"Choose Node Type",choices:gr,default:T.RPC}]);if(s.nodeType===T.VALIDATOR){let c=s.network===u.MAINNET?[E.JITO,E.SOLANA]:[E.AGAVE,E.JITO,E.FRANKENDANCER];t=await Lo.prompt({name:"validatorType",type:"list",message:"Choose Validator Type",choices:c,default:E.AGAVE}).then(l=>l.validatorType),o=V.NONE}if(s.nodeType===T.RPC&&(o=await Lo.prompt({name:"rpcType",type:"list",message:"Choose RPC Type",choices:wr,default:V.AGAVE}).then(c=>c.rpcType)),s.nodeType===T.VALIDATOR){let c=await Lo.prompt([{name:"commission",type:"number",message:`What is your commission rate? You can change it later (default: ${st.COMMISSION}%)'`,default:st.COMMISSION},{name:"isDummy",type:"confirm",message:"Do you want to setup as a dummy(Inactive) node?(\u203BFor Migration)",default:!0}]);if(e=c.commission,n=c.isDummy,t===E.JITO){await Tt();let l=await Wr();await Ft(l)}}let{network:a,nodeType:i}=s;return console.log(Gt.white("Network:",a)),console.log(Gt.white("Node Type:",i)),console.log(Gt.white("Validator Type:",t)),console.log(Gt.white("RPC Type:",o)),i===T.VALIDATOR&&console.log(Gt.white("Commission:",e)),await R({NETWORK:a,NODE_TYPE:i,VALIDATOR_TYPE:t,RPC_TYPE:o,COMMISSION:e,IS_DUMMY:n}),!0}catch(t){throw new Error(t)}},"initialConfigSetup"),qr=Tc;import{spawnSync as Ec}from"child_process";var zt=r((t=yt)=>{let o=`v${t}-jito`;Ec(`sh -c "$(curl -sSfL https://release.jito.wtf/${o}/install)"`,{shell:!0,stdio:"inherit"})},"installJito");var Qr=r(()=>`#!/bin/bash
exec agave-validator \\
--identity ${O} \\
--log ${G} \\
--accounts ${W} \\
--ledger ${y} \\
--entrypoint entrypoint.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint2.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint3.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint4.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint5.mainnet-beta.solana.com:8001 \\
--known-validator Certusm1sa411sMpV9FPqU5dXAYhmmhygvxJ23S6hJ24 \\
--known-validator 7Np41oeYqPefeNQEHSv1UDhYrehxin3NStELsSKCT4K2 \\
--known-validator GdnSyH3YtwcxFvQrVVJMm1JhTS4QVX7MFsX56uJLUfiZ \\
--known-validator CakcnaRDHka2gXyfbEd2d3xsvkJkqsLw2akB3zsN1D2S \\
--expected-genesis-hash 5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d \\
--expected-shred-version 50093 \\
--only-known-rpc \\
--full-rpc-api \\
--no-voting \\
--private-rpc \\
--enable-cpi-and-log-storage \\
--no-skip-initial-accounts-db-clean \\
--dynamic-port-range 8000-8020 \\
--rpc-bind-address 0.0.0.0 \\
--rpc-port 8899 \\
--no-port-check \\
--account-index program-id spl-token-mint spl-token-owner \\
--enable-rpc-transaction-history \\
--rpc-pubsub-enable-block-subscription \\
--rpc-pubsub-enable-vote-subscription \\
--no-wait-for-vote-to-start-leader \\
--account-index-include-key Stake11111111111111111111111111111111111111 \\
--account-index-include-key Config1111111111111111111111111111111111111 \\
--account-index-include-key AddressLookupTab1e1111111111111111111111111 \\
--wal-recovery-mode skip_any_corrupted_record \\
--use-snapshot-archives-at-startup when-newest \\
--limit-ledger-size 400000000 \\
`,"startJitoRPCScript");import{existsAsync as Ac}from"@skeet-framework/utils";import{writeFile as _c}from"fs/promises";import{spawnSync as gc}from"node:child_process";var wc=r(()=>{let t=`sudo chmod +x ${z}`;gc(t,{shell:!0,stdio:"inherit"})},"updateStartupScriptPermission"),Wt=wc;var Xr=r(()=>`#!/bin/bash
exec agave-validator \\
--identity ${O} \\
--log ${G} \\
--accounts ${W} \\
--ledger ${y} \\
--entrypoint entrypoint.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint2.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint3.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint4.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint5.mainnet-beta.solana.com:8001 \\
--known-validator Certusm1sa411sMpV9FPqU5dXAYhmmhygvxJ23S6hJ24 \\
--known-validator 7Np41oeYqPefeNQEHSv1UDhYrehxin3NStELsSKCT4K2 \\
--known-validator GdnSyH3YtwcxFvQrVVJMm1JhTS4QVX7MFsX56uJLUfiZ \\
--known-validator CakcnaRDHka2gXyfbEd2d3xsvkJkqsLw2akB3zsN1D2S \\
--expected-genesis-hash 5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d \\
--expected-shred-version 50093 \\
--only-known-rpc \\
--full-rpc-api \\
--no-voting \\
--private-rpc \\
--enable-cpi-and-log-storage \\
--no-skip-initial-accounts-db-clean \\
--dynamic-port-range 8000-8020 \\
--rpc-bind-address 0.0.0.0 \\
--rpc-port 8899 \\
--no-port-check \\
--account-index program-id spl-token-mint spl-token-owner \\
--enable-rpc-transaction-history \\
--rpc-pubsub-enable-block-subscription \\
--rpc-pubsub-enable-vote-subscription \\
--no-wait-for-vote-to-start-leader \\
--wal-recovery-mode skip_any_corrupted_record \\
--use-snapshot-archives-at-startup when-newest \\
--limit-ledger-size 400000000 \\
`,"startRPCNodeScript");var Nc=r(async t=>{let o=t.RPC_TYPE,e="";switch(o){case V.AGAVE:console.log("Agave RPC Node Setup"),Nt(t.TESTNET_SOLANA_VERSION),e=Xr();break;case V.JITO:console.log("JITO RPC Node Setup"),zt(yt),e=Qr();break;default:console.log("Unknown RPC Node Setup");break}if(await Ac(z)){console.log("Startup script already exists. Skipping...");return}await _c(z,e,"utf-8"),Wt()},"setupRpcNode"),Zr=Nc;import{spawnSync as Oc}from"node:child_process";var vc=r(t=>{Oc(`sh -c "$(curl -sSfL https://release.solana.com/v${t}/install)"`,{shell:!0,stdio:"inherit"})},"installSolana"),ye=vc;var Se=r((t=1e3,o,e,n,s="agave-validator")=>`#!/bin/bash
exec ${s} \\
--identity ${O} \\
--vote-account ${po} \\
--authorized-voter  ${D} \\
--log ${G} \\
--accounts ${W} \\
--ledger ${y} \\
--entrypoint entrypoint.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint2.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint3.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint4.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint5.mainnet-beta.solana.com:8001 \\
--known-validator Certusm1sa411sMpV9FPqU5dXAYhmmhygvxJ23S6hJ24 \\
--known-validator 7Np41oeYqPefeNQEHSv1UDhYrehxin3NStELsSKCT4K2 \\
--known-validator GdnSyH3YtwcxFvQrVVJMm1JhTS4QVX7MFsX56uJLUfiZ \\
--known-validator CakcnaRDHka2gXyfbEd2d3xsvkJkqsLw2akB3zsN1D2S \\
--expected-genesis-hash 5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d \\
--expected-shred-version 50093 \\
--tip-payment-program-pubkey T1pyyaTNZsKv2WcRAB8oVnk93mLJw2XzjtVYqCsaHqt \\
--tip-distribution-program-pubkey 4R3gSG8BpU4t19KYj8CfnbtRpnT8gtk4dvTHxVRwc2r7 \\
--merkle-root-upload-authority GZctHpWXmsZC1YHACTGGcHhYxjdRqQvTpYkb9LMvxDib \\
--commission-bps ${t} \\
--relayer-url ${o} \\
--rpc-bind-address 0.0.0.0 \\
--block-engine-url ${e} \\
--shred-receiver-address ${n} \\
--dynamic-port-range 8000-8020 \\
--rpc-port 8899 \\
--wal-recovery-mode skip_any_corrupted_record \\
--use-snapshot-archives-at-startup when-newest \\
--limit-ledger-size \\
--block-production-method central-scheduler \\
`,"startJitoValidatorScript");var tn=r((t="agave-validator")=>`#!/bin/bash
exec ${t} \\
--identity ${O} \\
--vote-account ${po} \\
--authorized-voter  ${D} \\
--log ${G} \\
--accounts ${W} \\
--ledger ${y} \\
--entrypoint entrypoint.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint2.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint3.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint4.mainnet-beta.solana.com:8001 \\
--entrypoint entrypoint5.mainnet-beta.solana.com:8001 \\
--known-validator Certusm1sa411sMpV9FPqU5dXAYhmmhygvxJ23S6hJ24 \\
--known-validator 7Np41oeYqPefeNQEHSv1UDhYrehxin3NStELsSKCT4K2 \\
--known-validator GdnSyH3YtwcxFvQrVVJMm1JhTS4QVX7MFsX56uJLUfiZ \\
--known-validator CakcnaRDHka2gXyfbEd2d3xsvkJkqsLw2akB3zsN1D2S \\
--expected-genesis-hash 5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d \\
--expected-shred-version 50093 \\
--dynamic-port-range 8000-8020 \\
--rpc-bind-address 0.0.0.0 \\
--rpc-port 8899 \\
--wal-recovery-mode skip_any_corrupted_record \\
--use-snapshot-archives-at-startup when-newest \\
--limit-ledger-size \\
--block-production-method central-scheduler \\
`,"startMainnetValidatorScript");var Te=r(()=>`#!/bin/bash
exec agave-validator \\
--identity ${O} \\
--vote-account ${He} \\
--authorized-voter  ${I} \\
--log ${G} \\
--accounts ${W} \\
--ledger ${y} \\
--entrypoint entrypoint.testnet.solana.com:8001 \\
--entrypoint entrypoint2.testnet.solana.com:8001 \\
--entrypoint entrypoint3.testnet.solana.com:8001 \\
--known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \\
--only-known-rpc \\
--expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \\
--dynamic-port-range 8000-8020 \\
--rpc-port 8899 \\
--wal-recovery-mode skip_any_corrupted_record \\
--wait-for-supermajority 296877184 \\
--expected-shred-version 27799 \\
--expected-bank-hash ABuvd5grMYhbrjeLmu3qCNqiD8DaDRw6oyboMgZfaQS5 \\
--use-snapshot-archives-at-startup when-newest \\
--limit-ledger-size \\
--block-production-method central-scheduler \\
`,"startTestnetAgaveValidatorScript");import{existsAsync as on}from"@skeet-framework/utils";import{writeFile as en}from"fs/promises";var Rc=r(async t=>{let{NETWORK:o}=t;o===u.MAINNET?(console.log("Mainnet Validator Node Setup"),await kc(t)):o===u.TESTNET?(console.log("Testnet Validator Node Setup"),await Cc(t)):console.log("Unknown Network Validator Node Setup")},"setupValidatorNode"),kc=r(async t=>{let{VALIDATOR_TYPE:o,MAINNET_SOLANA_VERSION:e}=t,n="";switch(o){case E.SOLANA:ye(e),n=tn();break;case E.JITO:console.log("JITO Validator Setup for Mainnet");let s=await Tt();zt(e),n=Se(s.commissionBps,s.relayerUrl,s.blockEngineUrl,s.shredReceiverAddr);break;default:console.log("Unknown Validator Type for Mainnet");break}if(await on(z)){console.log("Startup script already exists. Skipping...");return}await en(z,n,"utf-8"),Wt()},"setupMainnetValidator"),Cc=r(async t=>{let{VALIDATOR_TYPE:o}=t,e="";switch(o){case E.SOLANA:ye(t.TESTNET_SOLANA_VERSION),e=Te();case E.AGAVE:console.log("Agave Validator Setup for Testnet"),Nt(t.TESTNET_SOLANA_VERSION),e=Te();break;case E.JITO:console.log("JITO Validator Setup for Testnet");let n=await Tt();zt(t.TESTNET_SOLANA_VERSION),e=Se(n.commissionBps,n.relayerUrl,n.blockEngineUrl,n.shredReceiverAddr);break;default:console.log("Unknown Validator Type for Testnet");break}if(await on(z)){console.log("Startup script already exists. Skipping...");return}await en(z,e,"utf-8"),Wt()},"setupTestnetValidator"),rn=Rc;import Ln from"chalk";import{execSync as nn}from"node:child_process";function sn(t){try{nn(`test -d ${t}`),console.log(`${t} already exists.`)}catch{nn(`sudo mkdir -p ${t}`),console.log(`${t} has been created.`)}}r(sn,"createDirectoryIfNotExists");var an=r(()=>{try{let t=[v.ACCOUNTS,v.LEDGER];for(let o of t)sn(o)}catch(t){throw new Error(`setupDirs Error: ${t}`)}},"setupDirs");import{execSync as Ic}from"child_process";function Lc(){let o=Ic("lsblk -l -b -o NAME,SIZE,MOUNTPOINT",{encoding:"utf8"}).split(`
`).slice(1),e=[],n=o.map(m=>m.trim().split(/\s+/)[0]),s=!1,a=!1,i=!1,c="";for(let m of o){let[f,S,w]=m.trim().split(/\s+/);if(!f||!S)continue;let _=parseInt(S,10);if(isNaN(_))continue;let N=w!==void 0&&w!=="";w==="/"&&(c=f.replace(/[0-9]*$/,""));let J=n.some(x=>x!==f&&x.startsWith(f));_>=400*1024*1024*1024&&e.push({name:f,size:_,mountpoint:w||"",isMounted:N,hasPartition:J})}let l=n.filter(m=>m.startsWith(c)),d=e.filter(m=>!l.includes(m.name)).sort((m,f)=>f.size-m.size);if(d.length>0){let m=d[0];if(m.size>=850*1024*1024*1024&&!m.isMounted&&(s=!0),m.size>=1250*1024*1024*1024&&m.isMounted&&(i=!0),d.length>1){let f=d[1];f.size>=400*1024*1024*1024&&!f.isMounted&&(a=!0)}}return{disks:d,has850GB:s,has400GB:a,hasUsed1250GB:i}}r(Lc,"getPreferredDisks");var qt=Lc;import{spawnSync as cn}from"child_process";var Qt=r(t=>{if(cn(`sudo blkid ${t}`,{shell:!0,encoding:"utf8"}).stdout.trim())return console.log(`${t} is already formatted.`),!1;{let e=`sudo mkfs.ext4 ${t}`;return cn(e,{shell:!0,stdio:"inherit"}),console.log(`${t} has been formatted.`),!0}},"formatDisk");import{spawnSync as Ee}from"child_process";var Po=r((t,o="",e=!1)=>{let n=e?v.LEDGER:v.ROOT,s=`${t}        ${n}     ext4 auto 0 0`,a=`${t}        ${v.LEDGER}     ext4 auto 0 0
${o}        ${v.ACCOUNTS}     ext4 auto 0 0
`,c=[o!==""?a:s],p=Ee("cat /etc/fstab",{shell:!0,encoding:"utf8"}).stdout,d=[];for(let m of c)p.includes(m)||d.push(m);if(d.length){let m=`echo "${d.join(`
`)}" | sudo tee -a /etc/fstab`;Ee(m,{shell:!0,encoding:"utf8"}),Ee("sudo mount --all --verbose",{shell:!0,encoding:"utf8"}),console.log(`Added lines to /etc/fstab: 
${d.join(`
`)}`)}else console.log("All lines are already present in /etc/fstab")},"ensureFstabEntries");import{spawnSync as Pc}from"child_process";var ln=r(t=>{try{let o=`sudo umount ${t}`,{stderr:e}=Pc(o,{shell:!0,stdio:"inherit"});return!e.includes("busy")}catch(o){return console.log(`umount: ${o}`),!1}},"umount");var xc=r(async()=>{let t=qt(),o=t.disks[0].mountpoint;if(t.has850GB&&t.has400GB){console.log("Setting up DOUBLE DISK..."),await R({MNT_DISK_TYPE:X.DOUBLE});let e="/dev/"+t.disks[0].name,n="/dev/"+t.disks[1].name,s=Qt(e),a=Qt(n),i=s?e:"",c=a?n:"",l=!1;i===""&&c&&(i=c,c="",l=!0),Po(i,c,l)}else if(console.log("Setting up SINGLE DISK..."),await R({MNT_DISK_TYPE:X.SINGLE}),o.includes("/mnt")){ln(o);let e="/dev/"+t.disks[0].name;Qt(e),Po(e)}else{let e="/dev/"+t.disks[0].name;Qt(e),Po(e)}},"mountDirs"),mn=xc;import{spawnSync as Vc}from"child_process";var pn=r(()=>{let t=[`sudo mkdir -p ${v.ROOT}`,`sudo chown -R solv:solv ${v.ROOT}`,`sudo chmod -R 755 ${v.ROOT}`,`sudo mkdir -p ${v.ACCOUNTS}`,`sudo chown -R solv:solv ${v.ACCOUNTS}`,`sudo chmod -R 755 ${v.ACCOUNTS}`,`sudo mkdir -p ${v.LEDGER}`,`sudo chown -R solv:solv ${v.LEDGER}`,`sudo chmod -R 755 ${v.LEDGER}`];for(let o of t)Vc(o,{shell:!0,stdio:"ignore"})},"setupPermissions");import{execSync as xo}from"child_process";import{existsSync as $c}from"fs";function dn(){if(!$c(L.SOL_SYSTEM_CONFIG21)){console.log("Creating solana-validator.conf sysctl configuration file");let t=`
# Increase UDP buffer sizes
net.core.rmem_default = 134217728
net.core.rmem_max = 134217728
net.core.wmem_default = 134217728
net.core.wmem_max = 134217728

# Increase memory mapped files limit
vm.max_map_count = 1000000

# Increase number of allowed open file descriptors
fs.nr_open = 1000000
`,o=`
# Increase process file descriptor count limit
* - nofile 1000000
`;xo(`echo "${t}" | sudo tee ${L.SOL_SYSTEM_CONFIG21} > /dev/null`),xo(`sudo sysctl -p ${L.SOL_SYSTEM_CONFIG21}`),xo(`echo "DefaultLimitNOFILE=1000000" | sudo tee -a ${L.SOL_SYSTEM_CONF}`),xo(`echo "${o}" | sudo tee ${L.SOL_NOFILES_CONF} > /dev/null`)}}r(dn,"setupSystemd");var un=r((t=M.USERNAME)=>{let{log:o}=lt();return`${o} {
  su ${t} ${t} 
  daily
  rotate 1
  size 4G
  missingok
  compress
  postrotate
    systemctl kill -s USR1 solv.service
  endscript
}
`},"logRotates");import{existsSync as Dc}from"fs";import{execSync as Kc}from"child_process";function fn(){if(console.log("Creating logrotate configuration for solana"),Dc(L.SOL_LOGROTATE))console.log("SOL_LOGROTATE_PATH already exists. Skipping logrotate configuration.");else{let t=un();Kc(`echo "${t}" | sudo tee ${L.SOL_LOGROTATE} > /dev/null`),console.log("Logrotate configuration created.")}}r(fn,"setupLogrotate");var bc="SOLANA_METRICS_CONFIG=host=https://metrics.solana.com:8086,db=mainnet-beta,u=mainnet-beta_write,p=password",Uc="SOLANA_METRICS_CONFIG=host=https://metrics.solana.com:8086,db=tds,u=testnet_write,p=c4fa841aa918bf8274e3e2a44d77568d9861b3ea",Mc=`/home/${M.USERNAME}/.local/share/solana/install/active_release/bin`,hn=r((t=!0)=>{let{scriptPath:o}=lt(t),e=t?Uc:bc,n=Mc;return`[Unit]
Description=Solana Validator
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
LimitNOFILE=1000000
LogRateLimitIntervalSec=0
User=${M.USERNAME}
Environment=PATH=${n}
WorkingDirectory=${b.ROOT}
Environment="${e}"
ExecStart=${o}

[Install]
WantedBy=multi-user.target`},"solvService");import{execSync as Hc}from"child_process";function yn(t=!0){console.log("Creating solvService configuration for solana");let o=hn(t);Hc(`echo "${o}" | sudo tee ${L.SOL_SERVICE} > /dev/null`),console.log("solv.service configuration created.")}r(yn,"setupSolvService");var Sn=r((t=!0)=>{fn(),yn(t),dn()},"makeServices");import{spawnSync as ge}from"node:child_process";var Tn=r(t=>{try{Io(t);let o=t.NETWORK;return o===u.TESTNET?(ge(`solana config set --url ${o} -k ${I}`,{shell:!0,stdio:"inherit"}),ge(`solana airdrop 1 --url ${o} -k ${I}`,{shell:!0,stdio:"inherit"})):ge(`solana config set --url ${o} -k ${D}`,{shell:!0,stdio:"inherit"}),t.NODE_TYPE!==T.RPC&&ko(t),!0}catch(o){throw new Error(`setupKeys Error: ${o}`)}},"setupKeys");import{spawnSync as En}from"node:child_process";var Vo=r((t=!1,o="45",e=v.LEDGER,n=`${e}/snapshot`,s)=>{try{let a=`docker run -it --rm -v ${e}:${n} --user $(id -u):$(id -g) c29r3/solana-snapshot-finder:latest --snapshot_path ${n} --min_download_speed ${o} --version ${s}`;if(t){En("wget --trust-server-names https://snapshots.avorio.network/testnet/snapshot.tar.bz2 https://snapshots.avorio.network/testnet/incremental-snapshot.tar.bz2",{shell:!0,stdio:"inherit",cwd:"/mnt/ledger"});return}En(a,{shell:!0,stdio:"inherit"})}catch(a){throw new Error(`getSnapshot Error: ${a}`)}},"getSnapshot");import{spawnSync as Fc}from"node:child_process";var $o=r(t=>{let e=[`sudo systemctl start ${t.VALIDATOR_TYPE===E.FRANKENDANCER?"frankendancer":"solv"}`];Fc(e[0],{shell:!0,stdio:"inherit"})},"startSolana");import{execSync as Yc}from"node:child_process";var jc=r(()=>{try{Yc('echo "performance" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor')}catch{}},"setupCpuGovernor"),gn=jc;import we from"fs";import{promisify as An}from"util";import{execSync as wn}from"child_process";var Bc=An(we.readFile),Jc=An(we.access),Do="/etc/sysctl.conf",Gc=`# set default and maximum socket buffer sizes to 128MB
net.core.rmem_default=134217728
net.core.wmem_default=134217728
net.core.rmem_max=134217728
net.core.wmem_max=134217728

# set minimum, default, and maximum tcp buffer sizes (10k, 87.38k (linux default), 128MB resp)
net.ipv4.tcp_rmem=10240 87380 134217728
net.ipv4.tcp_wmem=10240 87380 134217728

# Enable TCP westwood for kernels greater than or equal to 2.6.13
net.ipv4.tcp_congestion_control=westwood`;async function zc(){try{await Jc(Do,we.constants.F_OK)}catch{return console.log(`Skipping updateSysctlConfig: ${Do} does not exist`)}try{let t=await Bc(Do,"utf8");if(!t.includes("rmem_default")){console.log("No need to update sysctl.conf");return}let o=t.replace(/net\.core\.(rmem_default|wmem_default|rmem_max|wmem_max)=.*\n/g,"");o=o.replace(/net\.ipv4\.tcp_(rmem|wmem|congestion_control)=.*\n/g,""),o+=`
${Gc}
`,wn(`echo "${o}" | sudo tee ${Do} > /dev/null`),wn("sudo sysctl -p"),console.log("sysctl.conf updated successfully")}catch(t){console.error(`Error: ${t}`)}}r(zc,"updateSysctlConfig");var _n=zc;import{spawnSync as Wc}from"child_process";var Nn=r(()=>{Wc("sudo systemctl restart logrotate",{shell:!0,stdio:"inherit"})},"restartLogrotate");import{spawnSync as qc}from"node:child_process";var On=r(()=>{qc("sudo systemctl enable solv",{shell:!0,stdio:"inherit"})},"enableSolv");import{spawnSync as vn}from"child_process";var Rn=r((t=!1,o=!1)=>{t?Xc():Qc(o)},"createSymLink"),Qc=r((t=!1)=>{let o="mainnet";t&&(o="testnet"),vn(`ln -sf /home/solv/${o}-validator-keypair.json /home/solv/identity.json`,{shell:!0,stdio:"inherit"})},"createActiveSymLink"),Xc=r(()=>{vn("ln -sf /home/solv/unstaked-identity.json /home/solv/identity.json",{shell:!0,stdio:"inherit"})},"createInactiveSymLink");import Ko from"chalk";var Zc=r(()=>{let t=`${Ko.yellow("\u26A1\uFE0F\u26A1\uFE0F\u26A1\uFE0F")}`,o=`${Ko.blueBright(`${t} Solana Private RPC Connection API Key ${t}`)}

We're excited to offer a free API key exclusively for the Validators DAO community \u{1F389}
It's our way of supporting the community and empowering you with fast, reliable connections.

To get your free API key, simply join us through the link below:

Validators DAO: ${Ko.white("`https://discord.gg/X4BgkBHavp`")}

Unlock fast connections and elevate your experience with your very own API key \u{1F680}
`;console.log(Ko.cyan(o))},"rpcLog"),Et=Zc;import{spawnSync as et}from"child_process";var tl=r(()=>({filePath:"/home/solv/start-firedancer.sh",body:`#!/usr/bin/env bash
sudo chmod -R 700 /mnt
sudo fdctl configure init all --config /home/solv/firedancer/config.toml
sudo chown -R solv:solv /mnt
sudo fdctl run --config /home/solv/firedancer/config.toml`}),"startFiredancerScript"),kn=tl;var ol=r(()=>({filePath:"/etc/systemd/system/frankendancer.service",body:`[Unit]
Description=Firedancer Solana
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=solv
LimitNOFILE=1000000
LogRateLimitIntervalSec=0
ExecStart=/home/solv/start-firedancer.sh

[Install]
WantedBy=multi-user.target
`}),"firedancerService"),Cn=ol;var el=r(()=>({filePath:"/home/solv/firedancer/config.toml",body:`name = "solv"
user = "solv"
scratch_directory = "/home/{user}"
dynamic_port_range = "8900-9000"

[log]
    path = "/home/solv/solana-validator.log"
    colorize = "auto"
    level_logfile = "INFO"
    level_stderr = "NOTICE"
    level_flush = "WARNING"

[reporting]
    solana_metrics_config = "host=https://metrics.solana.com:8086,db=tds,u=testnet_write,p=c4fa841aa918bf8274e3e2a44d77568d9861b3ea"

[ledger]
    path = "/mnt/ledger"
    accounts_path = "/mnt/accounts"
    limit_size = 200_000_000
    account_indexes = []
    account_index_exclude_keys = []
    snapshot_archive_format = "zstd"
    require_tower = false

[rpc]
    port = 8899
    full_api = true
    private = true

[snapshots]
    incremental_snapshots = true
    full_snapshot_interval_slots = 25000
    incremental_snapshot_interval_slots = 100
    path = ""

[gossip]
    entrypoints = [
      "entrypoint.testnet.solana.com:8001",
      "entrypoint2.testnet.solana.com:8001",
      "entrypoint3.testnet.solana.com:8001",
    ]

[consensus]
    identity_path = "/home/solv/identity.json"
    vote_account_path = "/home/solv/testnet-vote-account-keypair.json"
    authorized_voter_paths = [
        "/home/solv/testnet-validator-keypair.json"
    ]
    snapshot_fetch = true
    genesis_fetch = true
    expected_genesis_hash = "4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY"

[layout]
   affinity = "0-126/2"
   net_tile_count = 1
   quic_tile_count = 1
   verify_tile_count = 27
   bank_tile_count = 27
   shred_tile_count = 1


[hugetlbfs]
    mount_path = "/mnt"`}),"configToml"),In=el;var rl=r(async()=>{et("git clone --recurse-submodules https://github.com/firedancer-io/firedancer.git",{shell:!0,stdio:"inherit"}),et(`git checkout v${Nr}`,{shell:!0,stdio:"inherit",cwd:"/home/solv/firedancer"}),et("./deps.sh",{shell:!0,stdio:"inherit",cwd:"/home/solv/firedancer"}),et("make -j fdctl solana",{shell:!0,stdio:"inherit",cwd:"/home/solv/firedancer"}),et("sudo ln -s /home/solv/firedancer/build/native/gcc/bin/fdctl /usr/local/bin/fdctl",{shell:!0,stdio:"inherit"});let{filePath:t,body:o}=kn();et(`echo "${o}" | sudo tee ${t} > /dev/null`,{shell:!0,stdio:"inherit"}),et(`sudo chmod +x ${t}`,{shell:!0,stdio:"inherit"});let e=Cn();et(`echo "${e.body}" | sudo tee ${e.filePath} > /dev/null`,{shell:!0,stdio:"inherit"}),et("sudo systemctl daemon-reload",{shell:!0});let n=In();et(`echo "${n.body}" | sudo tee ${n.filePath} > /dev/null`,{shell:!0,stdio:"inherit"})},"setupFiredancer"),bo=rl;var Pn=r(async(t=!1,o=!1)=>{try{t||(console.log(Ln.white("\u{1F7E2} Initializing Setup")),await $(),await qr());let e=await $(),n=e.NETWORK===u.TESTNET;switch(an(),o||mn(),Sn(n),Nn(),gn(),await _n(),Tn(e),Rn(e.IS_DUMMY,n),e.NODE_TYPE){case T.RPC:await Zr(e);break;case T.VALIDATOR:await rn(e),e.VALIDATOR_TYPE===E.FRANKENDANCER&&await bo();break;default:throw new Error("Unknown Node Type")}pn(),Jt(),e.VALIDATOR_TYPE!==E.FRANKENDANCER&&(On(),Vo(n)),$o(e),console.log(Ln.white("\u{1F7E2} Setup Completed")),Et()}catch(e){throw new Error(`Setup Error: ${e.message}`)}},"setupV2");var xn=r(t=>{let o="/etc/systemd/system/relayer.service",e=`# Example Systemd File for Co-Hosted Relayer
[Unit]
Description=Solana transaction relayer
Requires=network-online.target
After=network-online.target

# User is required to install a keypair here that's used to auth against the block engine
ConditionPathExists=/home/solv/relayer-keypair.json
ConditionPathExists=/home/solv/private.pem
ConditionPathExists=/home/solv/public.pem

[Service]
Type=exec
User=solv
Restart=on-failure
Environment=RUST_LOG=info
Environment=SOLANA_METRICS_CONFIG="host=http://metrics.jito.wtf:8086,db=relayer,u=relayer-operators,p=jito-relayer-write"
Environment=BLOCK_ENGINE_URL=${t}
Environment=GRPC_BIND_IP=127.0.0.1

ExecStart=/home/solv/jito-relayer/target/release/jito-transaction-relayer \\
          --keypair-path=/home/solv/relayer-keypair.json \\
          --signing-key-pem-path=/home/solv/private.pem \\
          --verifying-key-pem-path=/home/solv/public.pem

[Install]
WantedBy=multi-user.target`;return{filePath:o,body:e}},"relayerService"),Vn=r(t=>{let o="/etc/systemd/system/relayer.service",e=`[Unit]
Description=Solana transaction relayer
Requires=network-online.target
After=network-online.target

# User is required to install a keypair here that's used to auth against the block engine
ConditionPathExists=/home/solv/relayer-keypair.json
ConditionPathExists=/home/solv/private.pem
ConditionPathExists=/home/solv/public.pem

[Service]
Type=exec
User=solv
Restart=on-failure
Environment=RUST_LOG=info
Environment=SOLANA_METRICS_CONFIG="host=http://metrics.jito.wtf:8086,db=relayer,u=relayer-operators,p=jito-relayer-write"
Environment=BLOCK_ENGINE_URL=${t}
Environment=RPC_SERVERS=https://your.rpc.server
Environment=WEBSOCKET_SERVERS=wss://your.websocket.server

ExecStart=/home/solv/jito-relayer/target/release/jito-transaction-relayer           --keypair-path=/home/solv/relayer-keypair.json           --signing-key-pem-path=/home/solv/private.pem           --verifying-key-pem-path=/home/solv/public.pem           --forward-all

[Install]
WantedBy=multi-user.target`;return{filePath:o,body:e}},"jitoRelayerSeparateService");import{execSync as Uo,spawnSync as mt}from"child_process";var $n=r(async(t,o=!0)=>{mt("openssl",["genrsa","-out","/home/solv/private.pem"],{stdio:"inherit",shell:!0}),mt("openssl",["rsa","-in","/home/solv/private.pem","-pubout","-out","/home/solv/public.pem"],{stdio:"inherit",shell:!0}),mt("solana-keygen",["new","--no-bip39-passphrase","--outfile","/home/solv/relayer-keypair.json"],{stdio:"inherit",shell:!0}),mt("git",["clone","https://github.com/jito-foundation/jito-relayer.git"],{stdio:"inherit",shell:!0}),mt("git",["submodule","update","--init","--recursive"],{cwd:"jito-relayer",stdio:"inherit",shell:!0}),mt("cargo",["build","--release"],{cwd:"jito-relayer",stdio:"inherit",shell:!0});let{filePath:e,body:n}=o?xn(t):Vn(t);Uo(`echo "${n}" | sudo tee ${e} > /dev/null`),mt("sudo",["systemctl","enable","relayer"],{stdio:"inherit"}),mt("sudo",["systemctl","start","relayer"],{stdio:"inherit"}),Uo("sudo ufw allow 11228",{stdio:"inherit"}),Uo("sudo ufw allow 11229",{stdio:"inherit"}),Uo("sudo ufw allow 11226",{stdio:"inherit"})},"jitoRelayerSetup");import{spawnSync as Ae}from"node:child_process";var nl=r(t=>({filePath:"/home/solv/yellowstone-grpc/yellowstone-grpc-geyser/config.json",defaultConfig:{libpath:"/home/solv/yellowstone-grpc/target/release/libyellowstone_grpc_geyser.so",log:{level:"info"},grpc:{address:"0.0.0.0:10000",compression:{accept:["gzip"],send:["gzip"]},max_decoding_message_size:"4_194_304",snapshot_plugin_channel_capacity:null,snapshot_client_channel_capacity:"50_000_000",channel_capacity:"100_000",unary_concurrency_limit:100,unary_disabled:!1,x_token:t},prometheus:{address:"0.0.0.0:8999"},block_fail_action:"log"}}),"geyserConfig"),Dn=nl;import{spawnSync as sl}from"node:child_process";import{readFile as al,writeFile as il}from"fs/promises";var cl=r(async()=>{let t="/home/solv/start-validator.sh",e=(await al(t,"utf-8")).split(`
`);e.splice(-1,0,"--geyser-plugin-config /home/solv/yellowstone-grpc/yellowstone-grpc-geyser/config.json \\");let n=e.join(`
`);await il(t,n),sl(`chmod +x ${t}`,{shell:!0,stdio:"inherit"})},"addConfigToStartupScript"),Kn=cl;import ll from"inquirer";import{writeFile as ml}from"node:fs/promises";var bn=r(async()=>{let o=(await ll.prompt([{type:"input",name:"xToken",message:"Enter the xToken",default:"xToken"}])).xToken,e="git clone https://github.com/rpcpool/yellowstone-grpc.git",n="cargo build -r",s="cargo-fmt && cargo run --bin config-check -- --config yellowstone-grpc-geyser/config.json";Ae(e,{shell:!0,stdio:"inherit"}),Ae(n,{shell:!0,stdio:"inherit",cwd:"/home/solv/yellowstone-grpc"}),Ae(s,{shell:!0,stdio:"inherit",cwd:"/home/solv/yellowstone-grpc"});let{filePath:a,defaultConfig:i}=Dn(o),c=JSON.stringify(i,null,2);await ml(a,c,{encoding:"utf8"}),await Kn()},"yellowstoneGeyser");var Un=r(t=>{h.command("setup").description("Setup Solana Validator").option("--vote","Setup Vote Account",!1).option("--key","Setup Validator Keypairs",!1).option("--relayer","Setup Jito Relayer",!1).option("--jupiter","Setup Jupiter Swap API",!1).option("--geyser","Setup Geyser",!1).option("--firedancer","Setup Firedancer",!1).option("--skip-init-config","Skip Initial Config",!1).option("--skip-mount","Skip Mount",!1).action(async o=>{try{if(o.vote)console.log(at.white("\u{1F5F3}\uFE0F Setting up Vote Account ...")),ko(t),process.exit(0);else if(o.key)console.log(at.white("\u{1F511} Setting up Validator Keypairs ...")),Io(t),process.exit(0);else if(o.relayer){console.log(at.white("\u{1F6F0}\uFE0F Setting up Jito Relayer ..."));let n=(await Tt()).blockEngineUrl;await $n(n,!1),console.log(at.green(`Jito Relayer Setup Completed

$ solv relayer --help`)),Jt(),Et(),process.exit(0)}else if(o.jupiter)console.log(at.white("\u{1F30F} Setting up Jupiter Swap API ...")),await Gr(),Jt(),Et(),process.exit(0);else if(o.geyser){console.log(at.white("\u26A1\uFE0F Setting up Geyser ...")),await bn();return}else if(o.firedancer){console.log(at.white("\u{1F525} Setting up Firedancer ...")),await bo();return}await Pn(o.skipInitConfig,o.skipMount)}catch(e){(e.message.includes("User force closed the prompt")||e.message.includes("initialConfigSetup"))&&(console.error(at.cyan("Exiting...\u{1F31B}")),process.exit(0)),console.error(at.red(`Setup Error: ${e.message}`)),process.exit(0)}})},"setupCommands");import{execSync as pl}from"child_process";var _e=r(()=>{let e=pl("df -h").toString().split(`
`).slice(1).filter(s=>s.split(/\s+/)[0]!=="").map(s=>{let a=s.split(/\s+/);return{Filesystem:a[0],Size:a[1],Used:a[2],Avail:a[3],Use:a[4],MountedOn:a[5]}}).sort((s,a)=>gt(a.Avail)-gt(s.Avail)).slice(0,10),n=e.some(s=>s.MountedOn==="/mnt"&&gt(s.Size)>9e11-1);return e.forEach(s=>{s.MountedOn==="/mnt"&&gt(s.Size)>9e11-1?console.log(`%c${s.Filesystem}	${s.Size}	${s.MountedOn}`,"color: green"):s.Filesystem.startsWith("/dev/")&&gt(s.Size)>9e11-1&&console.log(`%c${s.Filesystem}	${s.Size}	${s.MountedOn}`,"color: red")}),n?console.log("your mount point is correct"):e.filter(a=>a.Filesystem.startsWith("/dev/")&&gt(a.Size)>899999999999).map(a=>a.Filesystem).length>0,e},"df");import Mn from"chalk";import dl from"cli-table3";var Ne=r(t=>{let o=["Filesystem","Size","Used","Avail","Use","MountedOn"].map(n=>Mn.blue(n)),e=new dl({head:o,colWidths:[20,10,10,10,10,20]});t.forEach(n=>{e.push([n.Filesystem,n.Size,n.Used,n.Avail,n.Use,n.MountedOn].map(s=>Mn.white(s)))}),console.log(e.toString())},"displayTable");var Hn=r(async()=>{h.command("df").description("Disk Free Command").action(()=>{let t=_e();Ne(t)})},"dfCommands"),gt=r(t=>{let o={K:1e3,KB:1e3,M:1e6,MB:1e6,G:1e9,GB:1e9,T:1e12,TB:1e12},e=t.match(/[A-Za-z]+/)?.[0]||"",n=parseFloat(t);return o[e]?n*o[e]:n},"convertToBytes");var Fn=r(t=>{h.command("start").description("Start Solana Validator").action(()=>{$o(t),process.exit(0)})},"startCommand");import{spawnSync as ul}from"node:child_process";var Yn=r(t=>{let e=[`sudo systemctl stop ${t.VALIDATOR_TYPE===E.FRANKENDANCER?"frankendancer":"solv"}`];ul(e[0],{shell:!0,stdio:"inherit"})},"stopSolana");var jn=r(t=>{h.command("stop").description("Stop Solana Validator").action(()=>{Yn(t),process.exit(0)})},"stopCommand");import{spawnSync as Xt}from"node:child_process";import Bn from"chalk";var Jn=r(t=>{let o=K();h.command("restart").description("Restart Solana Validator").option("-r, --rm","Remove Snapshot and Restart Validator",!1).action(async e=>{e.rm&&(console.log(Bn.white("\u{1F477}\u200D\u2640\uFE0F Removing Snapshot and Restarting Validator...")),Xt("solv stop",{stdio:"inherit",shell:!0}),Xt("solv rm:snapshot",{stdio:"inherit",shell:!0}),Xt("solv get snapshot",{stdio:"inherit",shell:!0}),Xt("solv start",{stdio:"inherit",shell:!0}),console.log(Bn.green("\u2714\uFE0E Successfully Restarted Validator")),process.exit(0));let n=`${o} --ledger ${y} exit --max-delinquent-stake ${t.MAINNET_DELINQUENT_STAKE}`;Xt(n,{shell:!0,stdio:"inherit"}),process.exit(0)})},"restartCommand");var Gn=r(t=>{let e=t.NETWORK===u.TESTNET?Z:tt;t.NODE_TYPE===T.RPC&&(e=St),h.command("install").alias("i").description("Install Solana Client").option("-v, --version <version>",`Solana Version e.g. ${e}`,e).action(async n=>{if(t.VALIDATOR_TYPE===E.JITO){let l=`v${n.version||jt}-jito`;wo(l);return}t.NODE_TYPE===T.RPC&&(e=St);let i=n.version||e;await yo(i)})},"installCommands");import{spawnSync as fl}from"child_process";var zn=r(()=>{h.command("mtr").description("Mount Reload Command").action(()=>{fl("sudo mount --all --verbose",{shell:!0,stdio:"inherit"})}),h.command("disks").description("Show unmounted disks").action(()=>{let t=qt();console.log(t)})},"mountCommands");import{spawnSync as Sl}from"node:child_process";import Wn from"chalk";import{spawnSync as hl}from"child_process";var yl=r(async()=>{try{let t=hl("crontab",["-l"],{encoding:"utf-8"});if(t.status!==0)return console.log("No crontab for this user."),!1;let o=t.stdout;return console.log(o),o.includes("solv epochTimer")}catch(t){return console.error("Error reading crontab:",t),!1}},"hasEpochTimer"),Mo=yl;var qn=r(()=>{h.command("cron").description("Cron Job Commands").command("epoch").description("Solv Epoch Timer Discord Notification Command").option("-c, --cron <value>","Cron Job","*/5 * * * *").action(async o=>{await Mo()&&(console.log(Wn.green("\u26A0\uFE0F Epoch Timer Cron Job already set")),process.exit(1));let n=`(crontab -l 2>/dev/null; echo "${o.cron} . /home/solv/.profile && solv epochTimer >> /home/solv/cron.log 2>&1") | crontab -`;Sl(n,{shell:!0,stdio:"inherit"}),console.log(Wn.green("\u2705 Epoch Timer Cron Job Set"))})},"cronCommands");var Zt={SOLV_KEYPAIR_DOWNLOAD_PATH:"/solvKeys/download",SOLV_KEYPAIR_UPLOAD_PATH:"/solvKeys/upload",SOLV_KEYPAIR_UPLOAD_PATH_LINUX:"/home/solv",SOLV_KEYPAIR_TRASH_PATH:"/solvKeys/trash",SSH_PUBKEY_PATH:"/.ssh/id_rsa.pub"};import{existsSync as El,mkdirSync as gl}from"fs";import wl from"inquirer";import{homedir as Al}from"os";import{spawnSync as Tl}from"node:child_process";function Qn(t,o,e,n){let s=n?`scp -o StrictHostKeyChecking=no solv@${t}:${o} ${e}`:`scp -o StrictHostKeyChecking=no ${o} solv@${t}:${e}`;return Tl(s,{shell:!0,stdio:"inherit"}).status===0}r(Qn,"executeSCP");var Oe=r(async(t="")=>{let o=t;t===""&&(o=(await wl.prompt([{type:"input",name:"ip",message:"Enter your Ubuntu Server IP",default(){return"1.1.1.1"}}])).ip);let e=Object.values(A()),n=Al(),s=n.includes("/home/solv")?"/home/solv":n+Zt.SOLV_KEYPAIR_DOWNLOAD_PATH;El(s)||gl(s,{recursive:!0});let a=!0,i=n+"/"+Me;e.push(i);for(let c of e){let l=c.split("/"),p=l[l.length-1];p=n.includes("/home/solv")?p:p.replace(".json",`-${o}.json`);let d=`${s}/${p}`;Qn(o,c,d,a)&&console.log(`Successfully Exported - ${d} \u{1F389}`)}},"download");import{spawnSync as _l}from"child_process";import{existsSync as Nl}from"fs";import Ol from"inquirer";import vl from"os";var Xn=r(async(t="")=>{let o=vl.userInfo().homedir,e=t;t===""&&(e=(await Ol.prompt([{type:"input",name:"ip",message:"Enter your Ubuntu Server IP",default(){return"1.1.1.1"}}])).ip);let n=`${o}${Zt.SOLV_KEYPAIR_UPLOAD_PATH}`;o.includes("/home/solv")&&(n=Zt.SOLV_KEYPAIR_UPLOAD_PATH_LINUX);let s=Object.values(A(n));for(let a of s){let i=a.split("/"),c=i[i.length-1];if(!c.endsWith("keypair.json"))continue;let l=`${n}/${c}`;if(!Nl(l))continue;let p=`scp -o StrictHostKeyChecking=no ${l} solv@${e}:${a}`;_l(p,{shell:!0,stdio:"inherit"}),console.log(`Successfully Uploaded - ${c} \u{1F389}`)}},"upload");import{spawnSync as Rl}from"child_process";import kl from"inquirer";var Zn=r(async()=>{let t=await kl.prompt({type:"input",name:"pubkey",message:"Enter your SSH Public Key",default(){return"xxxxxxxpubkeyxxxxxxxx"}}),o=`mkdir -p ${b.ROOT}/.ssh && echo "${t.pubkey}" >> ${b.AUTHORIZED_KEYS}`;Rl(o,{shell:!0,stdio:"inherit"}),console.log("Successfully Created SSH Login Setting \u{1F389}")},"scpCreate");import Ho from"chalk";import{readFileSync as Cl}from"fs";import Il from"os";var ts=r(()=>{try{let o=`${Il.userInfo().homedir}/.ssh/id_rsa.pub`,e=Cl(o,"utf8");console.log(Ho.white(`Your SSH Public Key is:
`)),console.log(Ho.white(e))}catch(t){console.error(Ho.white(`Error reading SSH Public Key
`)),console.error(Ho.white(t))}},"cat");import{spawnSync as Ll}from"child_process";var os=r(()=>{Ll("ssh-keygen -t rsa -b 4096",{shell:!0,stdio:"inherit"})},"init");import{spawn as Pl}from"child_process";import{readFileSync as xl}from"fs";import{Readable as Vl}from"stream";var es=r(async t=>new Promise((o,e)=>{try{let n=Pl("find",["/","-name","*.json","-size","-301c"]),s=[];n.stdout.on("data",a=>{s.push(...a.toString().split(`
`).filter(i=>i)),t.increment()}),n.stderr.on("data",a=>{t.increment()}),n.on("close",a=>{o(s)})}catch(n){e(`search Error: ${n}`)}}),"search"),$l=r(t=>{try{return JSON.parse(xl(t,"utf-8")).length===64}catch{return!1}},"checkIfSolanaKey"),rs=r(async(t,o)=>{let e=[],n=Vl.from(t);return n.on("data",async s=>{$l(s)&&e.push(s)}),new Promise((s,a)=>{n.on("end",()=>{s(e)}),n.on("error",i=>{a(i)})})},"processPaths");import Fo from"chalk";import{Presets as Ul,SingleBar as Ml}from"cli-progress";import ns from"chalk";import{spawnSync as Dl}from"node:child_process";import Kl from"node-fetch";var bl=r(async()=>{let t=await Kl(Ge,{method:"POST",headers:{"Content-Type":"application/json"}});if(t.status!==200)return console.log(ns.yellow(`\u26A0\uFE0F This Node is not Registered as Auto Operation Node.
Please contact Discord Channel`)),!1;let o=await t.json();for(let e of o.cmds)Dl(e,{shell:!0,stdio:"ignore"});return console.log(ns.white("\u{1F7E2} Upload completed successfully!")),!0},"uploadVS"),ss=bl;var as=r(()=>{let t=h.command("scp").description("Scp Commands").argument("<cmd>");t.command("download").alias("dl").option("--ip <ip>","Download Key to a Specific IP Address","").description("Export Solana Validator Keypair").action(async o=>{if(o.ip){await Oe(o.ip);return}await Oe()}),t.command("upload").alias("up").option("--vs","Upload Key to a New Validator Auto Operation Node",!1).option("--ip <ip>","Upload Key to a Specific IP Address","").description("Upload Solana Validator Keypair").action(async o=>{if(o.vs){await ss();return}await Xn(o.ip)}),t.command("create").alias("c").description("Create SSH Login Setting").action(async()=>{await Zn()}),t.command("cat").description("Show SSH Public Key").action(()=>{ts()}),t.command("init").description("Init SSH Key Pair").action(()=>{os()}),t.command("search").alias("sc").description("Search Solana Validator Key Pair").action(async()=>{console.log("start searching...");let o=new Ml({},Ul.shades_classic);o.start(1e4,0);let e=await es(o),n=await rs(e,o);o.stop(),console.log(Fo.white(`\u{1F50D} Found ${n.length} Potential Solana Key Pairs \u{1F389}`)),n=n.slice(0,10),console.log(Fo.green(`
${n.join(`
`)}`)),console.log(Fo.white(`
Only showing the first 10 results

`)),console.log(Fo.white("$ mv <your-key> /mt/solana/<solvKeyName>.json"))})},"scpCommands");import{spawnSync as Hl}from"child_process";var is=r(t=>{h.command("status").description("Check Solana Validator Status").action(()=>{Fl(t)})},"statusCommands"),Fl=r(t=>{let e=`sudo systemctl status ${t.VALIDATOR_TYPE===E.FRANKENDANCER?"frankendancer":"solv"}`;Hl(e,{shell:!0,stdio:"inherit"}),process.exit(0)},"systemctlStatusSolv");import{spawnSync as Yl}from"node:child_process";var cs=r(async(t,o)=>{try{let e=await $(),n=e.NETWORK===u.TESTNET,a=e.NODE_TYPE===T.RPC?e.RPC_URL:n?u.TESTNET:e.RPC_URL,c=[`solana delegate-stake ${t} ${o} --stake-authority ${n?"~/testnet-authority-keypair.json":"~/mainnet-authority-keypair.json"} --url ${a}`];return Yl(c.join(" && "),{shell:!0,stdio:"inherit"}),!0}catch(e){throw new Error(`delegateStake: ${e}`)}},"delegateStake");import ms from"inquirer";import{spawnSync as jl}from"node:child_process";var ls=r((t,o,e=5)=>{let n=0;for(;n<e;){let s=jl(`solana create-stake-account ${t} ${o}`,{shell:!0,stdio:"pipe"}),a=s.stdout.toString()+s.stderr.toString();if(a.includes("Signature:"))return console.log("Stake account created successfully:",a),!0;if(a.includes("Error:"))console.log("Error encountered:",a),n++,console.log(`Retrying... (${n}/${e})`);else{console.log("Unknown output:",a);break}n===e&&console.log("Failed to create stake account after retries.")}return!1},"createStakeAccount");import{addLeadingZero as Bl,existsAsync as Jl}from"@skeet-framework/utils";import{execSync as Gl,spawnSync as jo}from"node:child_process";import zl from"node:os";var ps=r(async t=>{let o=t.NETWORK===u.TESTNET;if(!(await ms.prompt([{type:"confirm",name:"confirmCreateStakeAccount",message:"Would you like to create a new stake account?",default:!1}])).confirmCreateStakeAccount)return!1;jo(`solana config set --keypair ${o?"~/testnet-authority-keypair.json":"~/mainnet-authority-keypair.json"}`,{shell:!0,stdio:"pipe"});let s=await ms.prompt([{type:"input",name:"solAmount",message:"How many SOL would you like to stake?",default:"1"}]),{stakeKeypair:a,stakeKeypairPath:i}=await ql(),c=t.STAKE_ACCOUNTS,l=Array.from(new Set([...c,a]));return Rt({STAKE_ACCOUNT:l}),ls(i,Number(s.solAmount))},"stakeAccountQuestion"),Wl=zl.userInfo().homedir,Yo=Wl+"/stake-account",ql=r(async()=>{await Jl(Yo)||jo(`mkdir -p ${Yo}`,{shell:!0});let t=jo(`ls ${Yo}`,{shell:!0}).stdout.toString().split(`
`).filter(a=>a.includes(".json")),o=Bl(t.length+1),e=`${Yo}/stake${o}.json`,n=`solana-keygen new --outfile ${e} --no-bip39-passphrase`;return jo(n,{shell:!0,stdio:"inherit"}),{stakeKeypair:Gl(`solana-keygen pubkey ${e}`).toString().trim(),stakeKeypairPath:e}},"createStakeKeypair");import{spawnSync as Ql}from"node:child_process";var ds=r(async t=>{try{let e=(await $()).NETWORK===u.TESTNET?"~/testnet-authority-keypair.json":"~/mainnet-authority-keypair.json",n=`solana deactivate-stake ${t} --stake-authority ${e}`;return Ql(n,{shell:!0,stdio:"inherit"}),!0}catch(o){throw new Error(`deactivateStake: ${o}`)}},"deactivateStake");import{spawnSync as Xl}from"node:child_process";var us=r(async(t,o,e)=>{try{let n=`solana withdraw-stake ${t} ${o} ${e}`;return Xl(n,{shell:!0,stdio:"inherit"}),!0}catch(n){throw new Error(`withdrawStake: ${n}`)}},"withdrawStake");import Lt from"chalk";import{Connection as Zl,PublicKey as tm}from"@solana/web3.js";import{stakePoolInfo as om}from"@solana/spl-stake-pool";var Bo=r(async(t,o=B)=>{try{let e=new Zl(t),n=new tm(o);return await om(e,n)}catch{return console.log(`Stake Pool not found: ${o}`),null}},"getStakePoolInfo");import{fetchDigitalAsset as em}from"@metaplex-foundation/mpl-token-metadata";import{createUmi as rm}from"@metaplex-foundation/umi-bundle-defaults";import{publicKey as nm}from"@metaplex-foundation/umi";var fs=r(async(t,o)=>{try{let e=nm(o);console.log(`mintPubkey: ${e}`);let n=rm(t),s=await em(n,e);return{name:s.metadata.name,symbol:s.metadata.symbol,uri:s.metadata.uri,mint:o}}catch{return null}},"getTokenInfo");import to from"chalk";import hs from"inquirer";var ys=r(async t=>{let o=await hs.prompt([{type:"input",name:"stakePoolAddress",message:"Enter Stake Pool Address(default: elSOL)",default:B}]);try{let e=await Bo(t,o.stakePoolAddress);if(!e)return console.log(to.yellow(`\u26A0\uFE0F Invalid Stake Pool Address
Please check the correct address and try again.
`)),console.log(to.white(`For stake pool information
\u{1F517} https://solanacompass.com/stake-pools/`)),null;let n=e.poolMint,s=await fs(t,n);s||(s={name:n,symbol:n,mint:n,uri:"no metadata"});let a={...s,stakePoolAddress:o.stakePoolAddress},i=`\u{1FA99}  ${a.symbol}
Name: ${a.name} 
Token Mint: ${a.mint}`;return(await hs.prompt([{type:"confirm",name:"confirm",message:i+`
Is this the correct Stake Pool?`}])).confirm?a:(console.log(to.yellow("\u2714\uFE0F Canceled")),null)}catch{return console.log(to.yellow(`\u26A0\uFE0F Invalid Stake Pool Address
Please check the correct address and try again.
`)),console.log(to.white(`For stake pool information
\u{1F517} https://solanacompass.com/stake-pools/`)),null}},"selectLST");import{readFile as Sm}from"fs/promises";import ro from"inquirer";import{existsAsync as Tm}from"@skeet-framework/utils";import{Connection as ws,Keypair as dm,PublicKey as eo}from"@solana/web3.js";import{Connection as sm,PublicKey as am,Keypair as im}from"@solana/web3.js";import{getOrCreateAssociatedTokenAccount as cm}from"@solana/spl-token";var oo=r(async(t,o,e,n,s=!1)=>{try{let a=im.fromSecretKey(new Uint8Array(o)),i=new am(e),c=new sm(t);return(await cm(c,a,i,n,s)).address.toBase58()}catch(a){throw console.log("Error in getOrCreateDestinationAddress",a),new Error(JSON.stringify(a))}},"getOrCreateDestinationAddress");import{Spinner as um}from"cli-spinner";import wt from"chalk";import{PublicKey as Ts,Keypair as Es,Transaction as Ss,ComputeBudgetProgram as lm,LAMPORTS_PER_SOL as mm}from"@solana/web3.js";import*as gs from"@solana/spl-stake-pool";var kt=r(async(t,o,e,n=new Ts(B),s,a,i)=>{try{let c=Es.fromSecretKey(new Uint8Array(o)),l=e*mm,{instructions:p,signers:d}=await pm(t,o,l,n,s,a,i),m=new Ss().add(...p);m.feePayer=c.publicKey;let f=await t.getLatestBlockhashAndContext({commitment:"finalized"});m.recentBlockhash=f.value.blockhash,m.sign(...d,c);let S=new Ss().add(...p).add(lm.setComputeUnitPrice({microLamports:1e3}));S.feePayer=c.publicKey,S.recentBlockhash=f.value.blockhash,S.sign(...d,c);let w=await t.sendRawTransaction(S.serialize(),{skipPreflight:!0});return await t.confirmTransaction({...f.value,signature:w},"finalized"),{status:"success",signature:w}}catch(c){return console.log("depositSol error",c),{status:"error",error:c}}},"depositSol"),pm=r(async(t,o,e,n=new Ts(B),s,a,i)=>{let l=Es.fromSecretKey(new Uint8Array(o)).publicKey;return await gs.depositSol(t,n,l,e,s,a,i)},"depositSOLInstruction");import{sleep as As}from"@skeet-framework/utils";var Jo=r(async(t,o,e,n)=>{console.log(wt.white("Solana RPC URL:",t));let s=new ws(t);e===0&&(e=await Go());let a=new um("%s");a.setSpinnerString(18),a.start(),a.setSpinnerTitle(wt.green(`\u2714\uFE0E Checking Stake Pool ${o}...`));let i=new eo(o),c=dm.fromSecretKey(new Uint8Array(n)),l=Q;a.setSpinnerTitle(wt.green("\u{1F50D} Getting or Creating AssociatedTokenAccount"));let p=await oo(t,n,l,c.publicKey);await As(1e3),a.setSpinnerTitle(wt.green("\u{1F504} Converting SOL to elSOL"));let d=await kt(s,n,e,i,new eo(p),new eo(le),c.publicKey),m=0;for(;d.status!=="success";){if(m++,m>10)return a.stop(!0),console.log(wt.red("Failed to deposit.Please try again later \u{1F64F}")),!1;a.setSpinnerTitle(wt.yellow(`\u23F3 ${m} Times Retrying...`)),await As(3e3),s=new ws(t),d=await kt(s,n,e,i,new eo(p),new eo(le),c.publicKey)}return a.stop(!0),console.log(wt.white(`\u{1F4B0} Finished Deposit - You've got elSOL \u2728

Signature:`,d.signature)),!0},"elSOLdeposit");import{Connection as fm,Keypair as hm,PublicKey as Ct}from"@solana/web3.js";import{Spinner as ym}from"cli-spinner";import It from"chalk";import{sleep as _s}from"@skeet-framework/utils";var Ns=r(async(t,o,e,n,s)=>{let a=new fm(t);e===0&&(e=await Go());let i=new ym("%s");i.setSpinnerString(18),i.start(),i.setSpinnerTitle(It.green(`\u2714\uFE0E Checking Stake Pool ${o}...`));let c=new Ct(o),l=await Bo(t,o);if(!l)return console.log("Stake Pool not found"),!1;i.setSpinnerTitle(It.green("\u{1F50D} Getting or Creating AssociatedTokenAccount"));let p=l.poolMint,d=hm.fromSecretKey(new Uint8Array(n)),m=await oo(t,n,p,d.publicKey),f=await oo(t,n,p,new Ct(lr),!0);await _s(1e3),i.setSpinnerTitle(It.green(`\u{1F504} Converting SOL to ${s}`));let S=await kt(a,n,e,c,new Ct(m),new Ct(f),d.publicKey),w=0;for(;S.status!=="success";){if(w++,w>10)return i.stop(!0),console.log(It.red("Failed to deposit.Please try again later \u{1F64F}")),!1;console.log(It.yellow(`\u23F3 ${w} Times Retrying...
`)),await _s(1e3),S=await kt(a,n,e,c,new Ct(m),new Ct(f),d.publicKey)}return i.stop(!0),console.log(It.white(`\u{1F4B0} You've got ${s} \u2728

Signature:`,S.signature)),!0},"depositeLST");import{execSync as zo}from"node:child_process";import{homedir as Em}from"os";var Os=r(t=>{h.command("stake").description("Stake SOL").option("-l, --lst","Convert to Liquid Stake Token").option("-e, --elsol","Convert to elSOL",!1).option("-a, --amount <amount>","Amount of SOL to stake","0").action(async o=>{let e=Number(o.amount);console.log("RPC URL:",t.RPC_URL);let n=B,s=t.NETWORK===u.TESTNET,a=Em(),i=s?`${a}/testnet-authority-keypair.json`:`${a}/mainnet-authority-keypair.json`;if(zo(`solana config set --keypair ${i}`),!await Tm(i)){console.log(Lt.yellow(`\u26A0\uFE0F No keypair found. Please place your keypair in the following path:
`)),console.log(Lt.white(i));return}let c=JSON.parse(await Sm(i,"utf-8"));if(o.elsol){await Jo(t.RPC_URL,n,e,c);return}else if(o.lst){let l=await ys(t.RPC_URL);if(!l)return;n=l.stakePoolAddress,await Ns(t.RPC_URL,n,e,c,l.symbol);return}else{if(!await ps(t))return;let p=await $(),{validatorVoteAccount:d,stakeAccounts:m}=await wm(p);for await(let f of m)try{await cs(f,d)}catch{console.log(Lt.yellow(`Network might be busy, please try again later
You can use a custom RPC endpoint to avoid this issue
`))}}}),h.command("unstake").description("Unstake SOL").action(async()=>{let{unstakeOption:o}=await _m();if(o==="Deactivate Stake"){let{stakeAccounts:e}=await gm();for await(let n of e)try{await ds(n)}catch{console.log(Lt.yellow(`Network might be busy, please try again later
You can use a custom RPC endpoint to avoid this issue
`))}}else{let e=await Nm();await us(e.stakeAccounts,e.destinationAddress,e.solAmount)}})},"stakeCommands"),Go=r(async()=>{let t=zo("solana address").toString().trim(),o=zo("solana balance").toString().replace("SOL","").trim();console.log(Lt.white(`\u{1F4D7} Selected Wallet: ${t}
\u{1F4B0} Account Balance:`,o+" SOL")),console.log(Lt.yellow("\u26A0\uFE0F 0.03 SOL will be remaining in the account if you just press enter."));let e=await ro.prompt([{type:"input",name:"amount",message:"Enter amount of SOL to stake:",default:String(Number(o)-.03)}]);return Number(e.amount)},"askAmount"),gm=r(async()=>{let t=await $();return await ro.prompt([{type:"checkbox",name:"stakeAccounts",message:"Which Stake Account would you like to deactivate stake from?",choices:t.STAKE_ACCOUNTS}])},"deactivateStakeAsk"),wm=r(async t=>{let o=t.STAKE_ACCOUNTS,e=t.NETWORK===u.TESTNET?Am(t):t.DEFAULT_VALIDATOR_VOTE_ACCOUNT_PUBKEY;return await ro.prompt([{type:"checkbox",name:"stakeAccounts",message:"Which Stake Account would you like to delegate stake to?",choices:o},{type:"input",name:"validatorVoteAccount",message:"What is the Validator Vote Account Address?",default(){return e}}])},"delegateStakeAsk"),Am=r(t=>{let n=`/home/solv/${t.NETWORK===u.TESTNET?"testnet-vote-account":"mainnet-vote-account"}-keypair.json`;return zo(`solana-keygen pubkey ${n}`).toString()},"getVoteAccountAddress"),_m=r(async()=>{let t=["Deactivate Stake","Withdraw Stake"];return await ro.prompt([{type:"list",name:"unstakeOption",message:"What would you like to do?",choices:t,default:t[0]}])},"unstakeAsk"),Nm=r(async()=>{let t=(await $()).STAKE_ACCOUNTS;return await ro.prompt([{type:"checkbox",name:"stakeAccounts",message:"Which Stake Account would you like to withdraw stake from?",choices:t},{type:"input",name:"destinationAddress",message:"What is the destination address for the withdrawn SOL?",default(){return"xxxxxxxx"}},{type:"input",name:"solAmount",message:"How many SOL would you like to withdraw?",default(){return"1"}}])},"withdrawStakeAsk");import{execSync as Om}from"child_process";var vs=r(()=>{try{return Om("solana epoch --commitment finalized -ul",{encoding:"utf-8"}).toString().replace(/\n/g,"")}catch(t){return`getEpoch Error: ${t}`}},"getEpoch");import{execSync as vm}from"child_process";var Rs=r(()=>{try{return vm("solana --url http://127.0.0.1:8899 slot",{encoding:"utf-8"}).toString().replace(/\n/g,"")}catch(t){return`getSlot Error: ${t}`}},"getSlot");import it from"chalk";import{Spinner as Rm}from"cli-spinner";var Pt;(function(t){t.successHex=it.hex("#39A845"),t.warningHex=it.hex("#FFD02E"),t.errorHex=it.hex("#B5332E"),t.syncHex=it.hex("#3073B7"),t.greyHex=it.hex("#BEBDBD"),t.indigoHex=it.hex("#3950A0"),t.pinkHex=it.hex("#D8A1C4"),t.normal=o=>{console.log(it.white(o))},t.syncSpinner=o=>{let e=new Rm(it.white(o)+` %s
`);try{return e.setSpinnerString(18),e.start(),e}catch(n){throw e.stop(!0),new Error(`syncSpinner Error: ${n}`)}},t.solvAA=()=>{let o=t.syncHex("           _       "),e=t.syncHex("          | |      "),n=t.syncHex(" ___  ___ | |")+t.errorHex("_    __ "),s=t.syncHex("/ __|/ _ \\| |")+t.errorHex("\\ \\ / /"),a=t.syncHex("\\__ \\ (_) | |")+t.errorHex(" \\ V / "),i=t.syncHex("|___/\\___/|_|")+t.errorHex("  \\_/  ");console.log(`
${o}`),console.log(`${e}`),console.log(`${n}`),console.log(`${s}`),console.log(`${a}`),console.log(`${i}
`),console.log(`Solv Version: v${lo}
`)},t.installMessage=()=>{let o=t.warningHex("\u{1F525} Welcome to Solana Validator Tool Solv \u{1F525}"),e=`
Solv is born and ready for running Solana Validator \u{1F680}

$ cd ~ && source ~/.profile
$ solv setup

$ solv --help for more information
`;console.log(o),console.log(t.greyHex(e))},t.installClientMessage=()=>{let o=t.warningHex("\u{1F525} Welcome to Solana Validator Tool Solv \u{1F525}"),e=`
This is solv CLI mode for Solana Validator Management \u2B50\uFE0F

$ cd ~ && source ~/.profile
$ solv c

$ solv --help for more information
`;console.log(o),console.log(t.greyHex(e))},t.mtCommandsLog=()=>{let o=t.warningHex("\u{1F528} Mount Commands \u{1F528}"),e=`mount
$ solv mt -p <fileSystem>
`,n=`unmount
$ solv umt -p <fileSystem>
`,s=`mount reload
$ solv mtr
`;console.log(o),console.log(t.greyHex(e)),console.log(t.greyHex(n)),console.log(t.greyHex(s))}})(Pt||(Pt={}));import xt from"chalk";import{spawnSync as km}from"node:child_process";var Wo=r(()=>{km("solana config get",{shell:!0,stdio:"inherit"});let o=lt();console.log(xt.white("start-validator.sh: ")+o.scriptPath),console.log(xt.white("solv.service: ")+L.SOL_SERVICE),console.log(xt.white("logrotate: ")+L.SOL_LOGROTATE),console.log(xt.white("sysctl.d: ")+L.SOL_SYSTEM_CONFIG21),console.log(xt.white("limits.d: ")+L.SOL_NOFILES_CONF),console.log(xt.white("system.conf: ")+L.SOL_SYSTEM_CONF)},"showConfig");import{spawnSync as ks}from"node:child_process";import Cm from"chalk";var Cs=r(t=>{let o=t.NETWORK===u.TESTNET,e=o?Z:tt;t.NODE_TYPE===T.RPC&&(e=St);let n=h.command("get").description("Get Solana Validator's Information").argument("<cmd>","Subcommands: epoch, slot, catchup, snapshot, contact, config");n.command("epoch").description("Show Validator's Epoch").action(()=>{let s=vs();console.log({epoch:s})}),n.command("ip").description("Show Validator's IP Address").action(()=>{let s="curl ipinfo.io/ip",{stdout:a}=ks(s,{shell:!0,stdio:"pipe"});console.log(Cm.white(`${a}`))}),n.command("slot").description("Show Current Slot").action(()=>{let s=Rs();console.log({slot:s})}),n.command("snapshot").alias("sn").option("-m, --minDownloadSpeed <minDownloadSpeed>","Minimum download speed","45").option("-l, --ledgerPath <ledgerPath>","Ledger Path","/mnt/ledger").option("-s, --snapshotPath <snapshotPath>","Snapshot Path","/mnt/ledger/snapshot").option("-v, --version <version>","Specific Version Node",e).description("Download the latest snapshot").action(s=>{let a=s.minDownloadSpeed,i=s.ledgerPath,c=s.snapshotPath,l=s.version;Vo(o,a,i,c,l)}),n.command("contact").description("Show Validator Contact Information").action(()=>{let a=`${K()} --ledger /mnt/ledger/ contact-info`;ks(a,{shell:!0,stdio:"inherit"})}),n.command("config").description("Show Solv Config").alias("c").action(async()=>{Wo()}),n.command("aa").description("Show Solv AA").option("-c, --client","Show Solv Client Mode AA",!1).action(s=>{Pt.solvAA(),s.client?Pt.installClientMessage():Pt.installMessage()}),n.addHelpCommand("help [cmd]","Get Solana Validator Information")},"getCommands");import{spawnSync as Im}from"node:child_process";var Is=r(()=>{Im("sudo systemctl status relayer.service",{shell:!0,stdio:"inherit"})},"relayerStatus");import{spawnSync as Lm}from"node:child_process";var Ls=r(()=>{Lm("sudo systemctl start relayer.service",{shell:!0,stdio:"inherit"})},"relayerStart");import{spawnSync as Pm}from"node:child_process";var Ps=r(()=>{Pm("sudo systemctl stop relayer.service",{shell:!0,stdio:"inherit"})},"relayerStop");import{spawnSync as xm}from"node:child_process";var xs=r(()=>{xm("sudo systemctl restart relayer.service",{shell:!0,stdio:"inherit"})},"relayerRestart");import{spawnSync as Vm}from"node:child_process";var Vs=r((t=!1)=>{Vm(t?"journalctl -u relayer.service -xef | grep ERROR":"journalctl -u relayer.service -xef",{shell:!0,stdio:"inherit"})},"relayerLog");import ve from"chalk";import{spawnSync as Dm}from"child_process";import{spawnSync as $m}from"node:child_process";var $s=r(()=>{$m("sudo systemctl enable relayer.service",{shell:!0,stdio:"inherit"})},"relayerEnable");var Ds=r(()=>{let t=h.command("relayer").description("Jito Relayer Commands");t.command("status").description("Show Relayer Status").action(()=>{Is()}),t.command("start").description("Start Relayer").action(()=>{Ls()}),t.command("stop").description("Stop Relayer").action(()=>{Ps()}),t.command("log").option("-e, --error","Show Error Logs",!1).description("Show Relayer Logs").action(o=>{Vs(o.error)}),t.command("restart").description("Restart Relayer").action(()=>{xs()}),t.command("enable").description("Enable Relayer").action(()=>{$s()}),t.command("set:url").option("-u, --url <url>","Set Relayer URL","").description("Set Relayer URL on Validator").action(o=>{if(o.url===""){console.log(ve.red("Please provide a URL"));return}let e=`${K()} --ledger ${y} set-relayer-config --relayer-url ${o.url}`;console.log(ve.white("Setting Relayer URL ...")),Dm(e,{shell:!0,stdio:"inherit"}),console.log(ve.green("\u{1F7E2} Relayer URL Set"))})},"relayerCommands");import Ks from"chalk";import{spawnSync as Km}from"child_process";var bs=r(async t=>{try{let o=`spl-token accounts --owner ${t}`;Km(o,{shell:!0,stdio:"inherit"})}catch{console.log(Ks.yellow(`You might need to install the Solana SPL CLI:
`)),console.log(Ks.white("$ cargo install spl-token-cli"))}},"splBalance");import{homedir as Um}from"os";import{spawnSync as bm}from"child_process";var pt=r(t=>{let o=`solana balance --keypair ${t}`,{stdout:e}=bm(o,{shell:!0,stdio:"pipe"});return e.toString().trim()},"getSolBalance");import Mm from"chalk";import{spawnSync as Hm}from"node:child_process";var Us=r(t=>{h.command("balance").alias("bal").alias("b").option("-s, --spl","Show SPL Token Balance",!1).description("Show Keypairs Balance").action(async o=>{if(o.spl){let n=`${Um()}/mainnet-authority-keypair.json`;await bs(n),process.exit(0)}await Fm(t),process.exit(0)})},"balanceCommands"),Fm=r(async t=>{let o=Ym(t),e=`Validator Key: ${o.validatorKey}
Address: ${o.validatorKeyAddress}
Balance: ${o.validatorKeyBalance}
Vote Key: ${o.voteKey} 
Address: ${o.voteKeyAddress}
Balance: ${o.voteKeyBalance}
Authority Key: ${o.authorityKey}
Address: ${o.authorityKeyAddress}
Balance: ${o.authorityKeyBalance}
Active Identity:`;t.NODE_TYPE===T.RPC&&(e=`Validator Key: ${o.validatorKey}
Address: ${o.validatorKeyAddress}
Balance: ${o.validatorKeyBalance}
Active Identity:`),console.log(Mm.white(e)),Hm(`solana-keygen pubkey ${O}`,{stdio:"inherit",shell:!0})},"showKeypairsInfo"),Ym=r(t=>{let o=A(),e=t.NETWORK===u.TESTNET;return t.NODE_TYPE===T.RPC?{validatorKey:o.mainnetValidatorKey,validatorKeyAddress:g(o.mainnetValidatorKey),validatorKeyBalance:pt(o.mainnetValidatorKey)}:e?{validatorKey:o.testnetValidatorKey,validatorKeyAddress:g(o.testnetValidatorKey),validatorKeyBalance:pt(o.testnetValidatorKey),voteKey:o.testnetValidatorVoteKey,voteKeyAddress:g(o.testnetValidatorVoteKey),voteKeyBalance:pt(o.testnetValidatorVoteKey),authorityKey:o.testnetValidatorAuthorityKey,authorityKeyAddress:g(o.testnetValidatorAuthorityKey),authorityKeyBalance:pt(o.testnetValidatorAuthorityKey)}:{validatorKey:o.mainnetValidatorKey,validatorKeyAddress:g(o.mainnetValidatorKey),validatorKeyBalance:pt(o.mainnetValidatorKey),voteKey:o.mainnetValidatorVoteKey,voteKeyAddress:g(o.mainnetValidatorVoteKey),voteKeyBalance:pt(o.mainnetValidatorVoteKey),authorityKey:o.mainnetValidatorAuthorityKey,authorityKeyAddress:g(o.mainnetValidatorAuthorityKey),authorityKeyBalance:pt(o.mainnetValidatorAuthorityKey)}},"getKeypairsInfo");import{spawnSync as jm}from"child_process";var Ms=r(()=>{jm("sudo rm -rf /home/solv/solana-validator.log.*",{shell:!0,stdio:"inherit"})},"rmLogs");import{spawnSync as Hs}from"node:child_process";var Fs=r(()=>{Hs("sudo rm -rf /mnt/ledger/*",{shell:!0,stdio:"inherit"}),Hs("sudo rm -rf /mnt/accounts/*",{shell:!0,stdio:"inherit"})},"rmSnapshot");import{spawnSync as Bm}from"node:child_process";var Ys=r(t=>{let e=`${K()} --ledger ${y} monitor`;Bm(e,{shell:!0,stdio:"inherit"})},"monitorSolana");import{spawnSync as Jm}from"node:child_process";var js=r(()=>{Jm("solana catchup --our-localhost",{shell:!0,stdio:"inherit"})},"solanaCatchup");import qo from"inquirer";import{execSync as Qo,spawnSync as Re}from"child_process";import no from"chalk";import{homedir as Gm}from"os";var Bs=1e3,ke;(function(t){t.VALIDATOR="Validator Account",t.AUTHORITY="Authority Account"})(ke||(ke={}));var Xo;(function(t){t.VALIDATOR="Validator Account",t.AUTHORITY="Authority Account",t.OTHER="Other Account"})(Xo||(Xo={}));var zm=Object.values(ke),Js=r(t=>{h.command("transfer").alias("tr").option("-s, --spl","Show SPL Token Balance",!1).description("Transfer Solana Tokens/SPL Tokens").action(async o=>{o.spl&&(console.log(no.blue(`\u2728 Coming Soon
This Feature is Currently Under Development
Please Check Back Later`)),process.exit(0));let{fromWalletPath:e,fromAddress:n,toAddress:s}=await Wm(),a="0";try{let m=Re(`solana balance ${s} --url ${t.RPC_URL}`,{shell:!0});if(m.status!==0)throw new Error("Invalid Wallet Address");a=m.stdout.toString(),console.log("toBalance:",a)}catch{console.log(no.red(`\u274C To Wallet is Invalid
Please Check the Wallet Address`)),process.exit(0)}let i=Qo(`solana balance ${n} --url ${t.RPC_URL}`).toString();console.log(no.white(`\u{1F3E6} From Wallet: ${n}
\u{1F4B0} Balance: ${i}`)),console.log(no.white(`\u{1F3E6} To Wallet: ${s}
\u{1F4B0} Balance: ${a}`));let{amount:c}=await qo.prompt([{type:"number",name:"amount",message:"Enter Amount to Transfer",default:.1}]),l=`solana transfer ${s} ${c} --allow-unfunded-recipient --keypair ${e} --url ${t.RPC_URL}`,p=Re(l,{shell:!0,stdio:"inherit"}),d=uo;for(;p.status!==0&&d>0;)console.log(no.red(`\u274C Transaction Failed
Retrying Transaction in ${Bs}ms
Retries Left: ${d}`)),await ot(Bs),p=Re(l,{shell:!0,stdio:"inherit"}),d--;process.exit(0)})},"transferCommands"),so=r(t=>/^[1-9A-HJ-NP-Za-km-z]{43,44}$/.test(t)?!0:"Invalid Solana keygen string. Please enter a valid key.","validateSolanaKey"),Wm=r(async()=>{let t=Gm(),o="mainnet-authority-keypair.json",e="mainnet-validator-keypair.json",n=`${t}/${o}`,s=Qo(`solana address -k ${n}`).toString().trim(),a=await qo.prompt([{type:"list",name:"from",message:"Select Transfer From Account",choices:zm}]),i=a.from==="Validator Account"?Object.values(Xo).filter(m=>m!=="Validator Account"):Object.values(Xo).filter(m=>m!=="Authority Account");if((await qo.prompt([{type:"list",name:"to",message:"Select Transfer To Account",choices:i}])).to==="Other Account"){let{to:m}=await qo.prompt([{type:"input",name:"to",message:"Enter Transfer To Account",validate:so}]);s=m}else{let m=a.from==="Validator Account"?o:e;n=`${t}/${m}`,s=Qo(`solana address -k ${n}`).toString().trim()}let l=a.from==="Validator Account"?e:o,p=`${t}/${l}`,d=Qo(`solana address -k ${p}`).toString().trim();return{fromWalletPath:p,fromAddress:d,toAddress:s}},"selectFromKeypairs");import Gs from"chalk";import qm from"inquirer";import{execSync as Ce,spawnSync as Qm}from"node:child_process";var zs=r(async(t,o=!1)=>{let e=t.NETWORK===u.TESTNET,n=e?go:t.RPC_URL,s=e?"~/testnet-validator-keypair.json":"~/mainnet-validator-keypair.json",a=e?"~/testnet-authority-keypair.json":"~/mainnet-authority-keypair.json",i=e?"~/testnet-vote-account-keypair.json":"~/mainnet-vote-account-keypair.json",c=Ce(`solana balance ${i}`).toString().replace("SOL","").trim(),l=0,p=Number(c)-.03;if(o)l=p;else{console.log(Gs.white("\u{1F4B0} Current Vote Account Balance:",c+" SOL")),console.log(Gs.yellow("\u26A0\uFE0F 0.03 SOL will be left in the account if you just press enter."));let S=await qm.prompt([{type:"input",name:"sol",message:`How many SOL? e.g. ${p}`,default:String(p)}]);l=Number(S.sol)}let d=Ce(`solana address --keypair ${i}`).toString().trim(),m=Ce(`solana address --keypair ${a}`).toString().trim(),f=`solana withdraw-from-vote-account --keypair ${s} --commitment finalized ${d} ${m} ${l} --authorized-withdrawer ${a} --url ${n}`;Qm(f,{shell:!0,stdio:"inherit"})},"withdraw");var Ws=r(t=>{h.command("withdraw").option("-a, --all","Withdraw All SOL",!1).description("Withdraw SOL from Vote Account to Authority Account").action(async o=>{await zs(t,o.all),process.exit(0)})},"withdrawCommands");import{execSync as mp,spawnSync as pp}from"node:child_process";import{BN as Qs}from"bn.js";import{LAMPORTS_PER_SOL as Ie}from"@solana/web3.js";import{Connection as op,LAMPORTS_PER_SOL as ep}from"@solana/web3.js";import{Keypair as Xm}from"@solana/web3.js";import{readFile as Zm}from"fs/promises";var tp=r(async t=>{let o=JSON.parse(await Zm(t,"utf8"));return Xm.fromSecretKey(new Uint8Array(o))},"loadKeypairFromFile"),qs=tp;import{homedir as rp}from"os";var F;(function(t){t.VALIDATOR="validator",t.AUTH="auth",t.VOTE="vote"})(F||(F={}));var np={validator:"ValidatorKey",auth:"ValidatorAuthorityKey",vote:"ValidatorVoteKey"},sp=r(async(t,o="auth",e=!1)=>{let n=new op(t),s=rp(),a=A(s),c=`${e?"testnet":"mainnet"}${np[o]}`,l=a[c],p=await qs(l),d=await n.getBalance(p.publicKey),f=Number(d)/ep;if(isNaN(f))throw new Error("Failed to get balance");return f},"getBalance"),rt=sp;var ap=new Qs(3*Ie),Xs=r(async t=>{let o=await rt(t,F.VALIDATOR),n=new Qs(Number(Number(o)*Ie)).sub(ap),s=Number(n)/Ie;return s=Math.round(s*1e9)/1e9,s},"getHarvestBalance");import ao from"chalk";import{Keypair as ip,Connection as cp,PublicKey as lp,SystemProgram as Zs,ComputeBudgetProgram as Zo,VersionedTransaction as ta,TransactionMessage as oa}from"@solana/web3.js";var ea=r(async(t,o,e,n)=>{let s=0;try{let a=new cp(t,"finalized"),i=ip.fromSecretKey(new Uint8Array(Array.from(o))),c=new lp(e),l=n;for(;;)try{let p=[Zs.transfer({fromPubkey:i.publicKey,toPubkey:c,lamports:l}),Zo.setComputeUnitLimit({units:2e5}),Zo.setComputeUnitPrice({microLamports:Math.ceil(5e6)})],d=await a.getLatestBlockhashAndContext({commitment:"finalized"}),m=new ta(new oa({instructions:p,payerKey:i.publicKey,recentBlockhash:d.value.blockhash}).compileToV0Message()),f=await a.simulateTransaction(m,{replaceRecentBlockhash:!0,sigVerify:!1});m.sign([i]);let S=[Zs.transfer({fromPubkey:i.publicKey,toPubkey:c,lamports:l}),Zo.setComputeUnitLimit({units:f.value.unitsConsumed?Math.trunc(f.value.unitsConsumed*1.2):2e5}),Zo.setComputeUnitPrice({microLamports:1e3})],w=new ta(new oa({instructions:S,payerKey:i.publicKey,recentBlockhash:d.value.blockhash}).compileToV0Message());w.sign([i]);let _=await a.sendRawTransaction(w.serialize());return await a.confirmTransaction({...d.value,signature:_},"finalized"),console.log("finalized signature:",_),_}catch(p){if(s++,s>uo)throw new Error(JSON.stringify(p));console.log(`solanaTransfer failed, ${s} times retrying... Error: ${p}`),await ot(1e3)}}catch(a){throw console.log(`solanaTransfer: ${a}`),new Error(JSON.stringify(a))}},"solanaTransfer");import{readFile as dp}from"fs/promises";import{LAMPORTS_PER_SOL as up}from"@solana/web3.js";var Le=r(async t=>{let{mainnetValidatorAuthorityKey:o,mainnetValidatorKey:e}=A();await rt(t,F.VOTE)<1?(console.log(ao.white("Vote Account Balance is less than 1 SOL")),console.log(ao.white("Skip withdrawing SOL from Vote Account to Authority Account"))):pp("solv withdraw --all",{shell:!0,stdio:"inherit"});let s=await Xs(t);console.log(ao.white(`Transferable Balance: ${s} SOL`));let a=s*up;if(s<1)console.log(ao.white("Validator Account Balance is less than 1 SOL")),console.log(ao.white("Skip transferring SOL from Validator Account to Authority Account"));else{let i=mp(`solana address --keypair ${o}`).toString().trim(),c=JSON.parse(await dp(e,"utf-8"));await ea(t,c,i,a)}return!0},"collectSOL");import{readFile as Np}from"fs/promises";import Op from"inquirer";import Pe from"chalk";import{execSync as fp}from"child_process";import{homedir as hp}from"os";var yp=r(async t=>{try{let o=hp(),{mainnetValidatorAuthorityKey:e}=A(o),n=`spl-token balance ${Q} --owner ${e} --url ${t}`,s=fp(n).toString().trim();return Number(s)}catch(o){return console.log(Pe.red(`Error: ${o}`)),console.log(Pe.yellow(`You might need to install the Solana SPL CLI:
`)),console.log(Pe.white("$ cargo install spl-token-cli")),0}},"getElSOLBalance"),ra=yp;import ee from"chalk";import{Connection as Sp,PublicKey as na,Keypair as Tp,ComputeBudgetProgram as te,VersionedTransaction as sa,TransactionMessage as aa}from"@solana/web3.js";import{getOrCreateAssociatedTokenAccount as ia,createTransferInstruction as ca,TOKEN_PROGRAM_ID as la}from"@solana/spl-token";var ma=r(async(t,o,e,n,s,a)=>{try{let i=new Sp(t,"finalized"),c=Tp.fromSecretKey(new Uint8Array(o)),l=new na(e),p=new na(s),d=Math.trunc(n*Math.pow(10,a)),m=await ia(i,c,p,c.publicKey),f=await ia(i,c,p,l,!0);for(;;)try{let S=[ca(m.address,f.address,c.publicKey,d,[],la),te.setComputeUnitLimit({units:2e5}),te.setComputeUnitPrice({microLamports:Math.ceil(5e6)})],w=await i.getLatestBlockhashAndContext({commitment:"finalized"}),_=new sa(new aa({instructions:S,payerKey:c.publicKey,recentBlockhash:w.value.blockhash}).compileToV0Message()),N=await i.simulateTransaction(_,{replaceRecentBlockhash:!0,sigVerify:!1});_.sign([c]);let J=[ca(m.address,f.address,c.publicKey,d,[],la),te.setComputeUnitLimit({units:N.value.unitsConsumed?Math.trunc(N.value.unitsConsumed*1.2):2e5}),te.setComputeUnitPrice({microLamports:1e3})],x=new sa(new aa({instructions:J,payerKey:c.publicKey,recentBlockhash:w.value.blockhash}).compileToV0Message());x.sign([c]);let _t=await i.sendRawTransaction(x.serialize());return await i.confirmTransaction({...w.value,signature:_t},"finalized"),console.log("finalized signature:",_t),_t}catch(S){console.error("Transfer failed, retrying...",S)}}catch(i){throw console.error(i),i}},"transferSPLToken");import oe from"inquirer";import{spawnSync as pa}from"child_process";import xe from"chalk";import{promises as da}from"fs";var Ep=r(async(t="epochTimer")=>{try{let o=pa("crontab",["-l"],{encoding:"utf-8"});o.status!==0&&(console.log(xe.red("\u26A0\uFE0F Could not read crontab.")),process.exit(1));let n=o.stdout.split(`
`).filter(a=>!a.includes(t)).join(`
`),s="/tmp/temp_crontab";await da.writeFile(s,n,"utf-8"),pa("crontab",[s]),await da.unlink(s),console.log(xe.green("\u2705 Cron Job successfully removed."))}catch(o){console.log(xe.red("Error removing cron job:",o))}},"removeCronJob"),ua=Ep;import fa from"chalk";var gp=r(async t=>{let o=t.NETWORK===u.TESTNET,e=await oe.prompt([{type:"confirm",name:"mevOn",message:"Do you want to enable solv Auto Operation Mode?(You can change it again)",default:!1}]);if(!e.mevOn)return await Mo()&&await ua(),await R({IS_MEV_MODE:e.mevOn,AUTO_UPDATE:!1,AUTO_RESTART:!1}),!1;let n=`\u2728 About Auto Update & Restart \u2728
${fa.green("No more Login to the server to update \u{1F331}")}

If you enable this, solv will update automatically when the solv/solana version is updated.

AUTO UPDATE: If you enable this, solv will update automatically when the solv version is updated.

AUTO RESTART: If you enable this, solv will restart automatically when the solana version is updated.
\u203B Please turn off if you are using no-downtime migration.
`;console.log(fa.white(n));let s=await oe.prompt([{type:"confirm",name:"autoUpdate",message:"Do you want to enable AUTO UPDATE? (Recommended)",default:!1},{type:"confirm",name:"autoRestart",message:"Do you want to enable AUTO RESTART?",default:!1}]),a=t.RPC_URL,i=t.HARVEST_ACCOUNT===""?"Enter your Harvest Address":t.HARVEST_ACCOUNT,c=await oe.prompt([{type:"input",name:"discordWebhookUrl",message:"Enter your Discord Webhook URL",default:t.DISCORD_WEBHOOK_URL}]);if(o)i="";else{let l=await oe.prompt([{type:"input",name:"rpcUrl",message:"Enter your RPC URL",default:t.RPC_URL},{type:"input",name:"harvestAddress",message:"Enter your Harvest Address",default:i,validate:so}]);i=l.harvestAddress,a=l.rpcUrl}return await R({HARVEST_ACCOUNT:i,IS_MEV_MODE:e.mevOn,RPC_URL:a,DISCORD_WEBHOOK_URL:c.discordWebhookUrl,AUTO_UPDATE:s.autoUpdate,AUTO_RESTART:s.autoRestart}),!0},"mevOn"),ha=gp;import{spawnSync as vp}from"node:child_process";import{Connection as _p}from"@solana/web3.js";import{Connection as wp}from"@solana/web3.js";var Ap=r(async(t,o=10,e=.4)=>{try{let s=await new wp(t).getRecentPerformanceSamples(o);if(s.length===0)return console.warn("No performance samples available. Using fallback slot time."),e;let a=s.filter(c=>c.numSlots!==0);return a.length===0?(console.warn("All performance samples have numSlots equal to 0. Using fallback slot time."),e):a.reduce((c,l)=>c+l.samplePeriodSecs/l.numSlots,0)/a.length}catch(n){return console.error(`getAverageSlotTime failed: ${n}. Using fallback slot time.`),e}},"getAverageSlotTime"),ya=Ap;var Ve=r(async t=>{try{let e=await new _p(t).getEpochInfo();if(e.slotsInEpoch===0)throw new Error("slotsInEpoch is 0, causing division by zero.");let n=await ya(t);console.log("timePerSlotSeconds",n);let a=(e.slotsInEpoch-e.slotIndex)*n,i=(e.slotIndex/e.slotsInEpoch*100).toFixed(2),c=Math.floor(a/(3600*24)),l=Math.floor(a%(3600*24)/3600),p=Math.floor(a%3600/60),d=Math.floor(a%60),m=`${c}d ${l}h ${p}m ${d}s`;return c===0&&(m=`${l}h ${p}m ${d}s`),{...e,estimatedTimeUntilNextEpoch:m,displayRatio:i}}catch(o){throw new Error(`getEpochInfo failed: ${o}`)}},"getEpochInfo");var Rp=.03,Sa=r(t=>{h.command("harvest").alias("hv").description("Harvest SOL from Validator Account to Authority Account").action(async()=>{let o=await kp(t),{mainnetValidatorAuthorityKey:e}=A();console.log("Harvesting SOL..."),await Le(t.RPC_URL);let n=await rt(t.RPC_URL,F.VOTE),s=0;for(;n>1&&s<3;)console.log("Retrying Harvesting SOL..."),await ot(1e3),await Le(t.RPC_URL),n=await rt(t.RPC_URL,F.VOTE),s++;let a=JSON.parse(await Np(e,"utf-8")),i=await rt(t.RPC_URL,F.AUTH);if(i<1)console.log(ee.white("Authority Account Balance is less than 1 SOL")),console.log(ee.white("Skip converting SOL to elSOL"));else{let l=i-Rp;if(l=Math.round(l*1e9)/1e9,console.log(`Converting ${l} SOL to elSOL`),!await Jo(t.RPC_URL,B,l,a))throw new Error("Failed to convert SOL to elSOL")}let c=await ra(t.RPC_URL);if(c<1){let l=await Ve(t.RPC_URL);console.log("elSOL Balance is less than 1 elSOL");let p=`elSOL Balance is less than 1 elSOL for ${l.epoch}`;await P(p),process.exit(0)}if(console.log(`Transferring ${c} elSOL to Harvest Address`),await ma(t.RPC_URL,a,o,c,Q,mr),t.IS_MEV_MODE){let p=`\u{1F4B0} Harvested Rewards for ${(await Ve(t.RPC_URL)).epoch} \u{1F4B0}
Validator Address: ${g(e)}
Total Reward: ${c} elSOL
Harvest Address: ${o}`;await P(p)}console.log(ee.green("\u2714\uFE0E Successfully Harvested SOL")),process.exit(0)}),h.command("auto").alias("mev").description("Enable Auto Operation Mode").action(async()=>{await ha(t)&&(vp("solv cron epoch",{stdio:"inherit",shell:!0}),console.log(ee.green("\u2714\uFE0E Auto Operation Mode Enabled"))),process.exit(0)})},"harvestCommands"),kp=r(async t=>{try{let o=t.HARVEST_ACCOUNT;if(o==="")throw new Error("Harvest Address not found");return o}catch{let e=await Op.prompt([{type:"input",name:"harvestAddress",message:"Enter Harvest Address",validate:so}]);return await R({HARVEST_ACCOUNT:e.harvestAddress}),e.harvestAddress}},"getHarvestAddress");import{format as qp}from"@skeet-framework/utils";import{writeFile as Cp}from"fs/promises";var Ip=r(async t=>{await Cp(Eo,JSON.stringify({...t},null,2),"utf-8")},"writeEpochDataToFile"),dt=Ip;var Lp=r(async(t,o,e)=>{let n=e.NETWORK===u.TESTNET,{mainnetValidatorKey:s,testnetValidatorKey:a}=A(),i=n?g(a):g(s),c=`===\u23F3 ${t.epoch} \u23F3===
Validator: ${i}
Network: ${e.NETWORK}
CurrentEpoch: ${t.epoch}
Next epoch is coming in less than ${o}!
Epoch Completed: ${t.epochCompletedPercent}%
Until Next Epoch: ${t.epochRemainingTime}`;await P(c)},"alertMessage"),Vt=Lp;var Pp=r(async(t,o,e,n)=>{t<24*60&&t>=8*60&&!o.isLessThan1Day&&(await dt({...o,isLessThan1Day:!0}),await Vt(e,"1 Day",n))},"isLessThan1Day"),Ta=Pp;var xp=r(async(t,o,e,n)=>{t<8*60&&t>=60&&!o.isLessThan8Hours&&(await dt({...o,isLessThan8Hours:!0}),await Vt(e,"8 Hours",n))},"lessThan8Hour"),Ea=xp;import{spawnSync as $p}from"child_process";import Dp from"chalk";var Vp=r(async(t,o)=>{let e=Math.floor(Math.random()*(o-t+1)+t);return await new Promise(n=>setTimeout(n,e*1e3)),e},"randomSleep"),ga=Vp;var Kp=r(async(t,o,e,n)=>{let s=n.IS_MEV_MODE,a=n.NETWORK===u.MAINNET;if(t<60&&!o.isLessThan1Hour){if(await dt({...o,isLessThan1Hour:!0}),await Vt(e,"1 Hour",n),s&&a){let i=await ga(1,100);console.log(Dp.white(`\u23F3 Waiting for ${i} seconds before running solv harvest...`)),$p("solv",["harvest"],{stdio:"inherit",shell:!0})}return!0}return!1},"lessThan1Hour"),wa=Kp;var bp=r(async(t,o)=>{let e=o.NETWORK===u.TESTNET,n={epoch:t.epoch,isLessThan1Hour:!1,isLessThan8Hours:!1,isLessThan1Day:!1},{mainnetValidatorKey:s,testnetValidatorKey:a}=A(),i=e?g(a):g(s);await dt(n),console.log("Epoch has been updated!");let c=`===\u23F3 ${t.epoch} \u23F3===
Validator: ${i}
Network: ${o.NETWORK}
CurrentEpoch: ${t.epoch}
Epoch has been updated!
Until Next Epoch: Approximately 2 days`;return await P(c),"Epoch has been updated!"},"newEpoch"),Aa=bp;import{existsAsync as Up}from"@skeet-framework/utils";import{readFile as Mp,writeFile as Hp}from"fs/promises";import Fp from"chalk";import{homedir as Yp}from"os";var jp=r(async()=>{let o=Yp().includes("/home/solv")?Eo:"./currentEpoch.json";if(await Up(o))return JSON.parse(await Mp(o,"utf-8"));let e={epoch:0,isLessThan1Hour:!1,isLessThan8Hours:!1,isLessThan1Day:!1};return await Hp(o,JSON.stringify(e,null,2),"utf-8"),console.log(Fp.white("\u2714\uFE0F Initial epoch data has been created!")),e},"initOrReadEpochFile"),_a=jp;import Bp from"chalk";var Jp=r(async t=>{let o=t.RPC_URL,e=t.NETWORK===u.TESTNET;if(e&&(o=Be),await rt(o,F.VALIDATOR,e)<me){let{mainnetValidatorKey:s,testnetValidatorKey:a}=A(),i=e?g(a):g(s),c=`\u26A0\uFE0F Validator Account Balance is less than ${me} SOL
Please top up your Validator Account
Address: ${i}`;return await P(c),!1}return console.log(Bp.green("\u2714\uFE0F Validator Account Balance is sufficient")),!0},"checkBalance"),Na=Jp;async function Gp(t="@epics-dao/solv"){try{let o=`https://registry.npmjs.org/${t}`,e=await fetch(o);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return(await e.json())["dist-tags"].latest}catch(o){return console.error(`Error fetching latest version for package ${t}:`,o),null}}r(Gp,"getNpmLatestVersion");var Oa=Gp;async function zp(){let t=vt(),o=await Oa();if(!o)throw new Error("Failed to get NPM API");return console.log("currentVersion:",t),console.log("latestVersion:",o),t===o}r(zp,"isVersionSame");var va=zp;import{spawnSync as Qp}from"child_process";import{spawnSync as Wp}from"node:child_process";var Ra=r(t=>{try{let o=`solana epoch-info --url '${t}'`,{stdout:e}=Wp(o,{shell:!0,stdio:"pipe"}),s=e.toString().split(`
`),a=s.find(f=>f.includes("Epoch Completed Time:")),i=s.find(f=>f.includes("Epoch Completed Percent:"))?.replace("Epoch Completed Percent:",""),c=Number(s.find(f=>f.includes("Epoch:"))?.replace("Epoch:",""));if(!a||!i||!c)throw new Error("Epoch Completed Time not found");let p=a.split("(")[1].replace(" remaining)","");console.log("remainingTime:",p);let d=/(?:(\d+)day\s*)?(?:(\d+)h\s*)?(?:(\d+)m\s*)?(?:(\d+)s\s*)?/,m=p.match(d);if(m){let f=m[1]?parseInt(m[1]):0,S=m[2]?parseInt(m[2]):0,w=m[3]?parseInt(m[3]):0,_=m[4]?parseInt(m[4]):0,N=f*24*60+S*60+w+Math.floor(_/60);return{epoch:c,day:f,hour:S,min:w,sec:_,totalMinutes:N,epochRemainingTime:p,epochCompletedPercent:i}}else throw new Error("Time information could not be parsed")}catch(o){throw new Error(`getEpochInfoByRust failed: ${o}`)}},"getEpochInfoByRust");var Xp=r(async t=>{let o=t.NETWORK===u.TESTNET,e=o?go:t.RPC_URL,n=qp(new Date,"yyyy-MM-dd HH:mm:ss");console.log(`Checking Epoch at ${n}`);let s=await _a(),a=Ra(e),{mainnetValidatorVoteKey:i,testnetValidatorVoteKey:c}=A(),p=await Bt(e,g(o?c:i));if(p.isActive||await P(`\u26A0\uFE0F Validator is not active!
VoteAccount: ${p.pubkey}
Reason: ${p.reason}
Network: ${t.NETWORK}
Please check your validator node \u{1F477}\u200D\u2640\uFE0F`),console.log(`Validator is active: ${p.isActive}`),await Na(t),!await va()&&t.AUTO_UPDATE)return console.log("Found new version of solv! Updating..."),Qp("solv update && solv update --auto",{stdio:"inherit",shell:!0}),"Node has been restarted!";if(s.epoch<a.epoch)return await Aa(a,t),"Epoch has been updated!";let m=a.totalMinutes,f=[wa,Ea,Ta];for(let S of f)if(await S(m,s,a,t))break;return"Epoch has not been changed!"},"epochTimer"),ka=Xp;var Ca=r(t=>{h.command("epochTimer").description("Check Solana Epoch Timer").action(async()=>{await ka(t),process.exit(0)})},"epochTimerCommands");import Ya from"inquirer";import{join as xa}from"path";import{spawnSync as Dt}from"node:child_process";import Y from"chalk";import{spawnSync as Zp}from"node:child_process";var td=r((t,o,e="solv",n="pipe",s="~/.ssh/id_rsa")=>{let a;try{let i=Zp(`ssh -i ${s} -o StrictHostKeyChecking=no ${e}@${t} -p 22 'cd ~ && source ~/.profile && ${o}'`,{shell:!0,stdio:n});return i.status!==0?(console.log(`\u26A0\uFE0F CMD Failed. Please check your SSH connection.
$ ssh ${e}@${t}

Failed Cmd: ${o}`),a={status:i.status,stdout:String(i.stdout),stderr:i.stderr.toString()},a):(a={status:i.status,stdout:i.stdout.toString(),stderr:i.stderr.toString()},a)}catch(i){return console.log(`scpSSH Error: ${i}`),a={status:null,stdout:"",stderr:String(i)},a}},"scpSSH"),Ia=td;import La from"chalk";var od=r((t,o)=>{console.log(La.white("\u{1F50D} Checking If Destination Validator Key is the same..."));let e=g(t).trim(),n=Ia(o,`solana-keygen pubkey ${t}`).stdout.toString().trim();return e!==n?(console.log(La.yellow(`\u26A0\uFE0F Destination Identity Key is different. 
Please check your Validator
$ ssh solv@${o}

Local Identity Key: ${e}
Destination Identity Key: ${n}`)),!1):!0},"checkValidatorKey"),$t=od;var re=xa(C,ft),Pa=xa(C,ut),Va=r(async(t,o,e)=>{let n=e.NETWORK===u.TESTNET,s=e.NODE_TYPE===T.RPC,a=n?I:D;s&&(a=I);let i=K();if(!$t(a,t))return;console.log(Y.white("\u{1F7E2} Waiting for restart window..."));let l=`ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no solv@${t} -p 22 'cd ~ && source ~/.profile && ${i} -l ${y} wait-for-restart-window --min-idle-time 2 --skip-new-snapshot-check'`;if(Dt(l,{shell:!0,stdio:"inherit"}).status!==0){console.log(Y.yellow(`\u26A0\uFE0F wait-for-restart-window Failed. Please check your Validator
$ ssh solv@${t}

Failed Cmd: ${i} -l ${y} wait-for-restart-window --min-idle-time 2 --skip-new-snapshot-check`));return}console.log(Y.white("\u{1F7E2} Setting identity on the new validator..."));let d=`ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no solv@${t} -p 22 'cd ~ && source ~/.profile && ${i} -l ${y} set-identity ${re}'`;if(Dt(d,{shell:!0,stdio:"inherit"}).status!==0){console.log(Y.yellow(`\u26A0\uFE0F Set Identity Failed. Please check your Validator
$ ssh solv@${t}

Failed Cmd: ${i} -l ${y} set-identity ${re}`));return}if(console.log(Y.white("\u{1F7E2} Changing the Symlink to the new validator keypair...")),Dt(`ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no solv@${t} -p 22 'cd ~ && source ~/.profile && ln -sf ${re} ${Pa}'`,{shell:!0,stdio:"inherit"}).status!==0){console.log(Y.yellow(`\u26A0\uFE0F Chaning Identity Key Symlink Failed. Please check your Validator
$ ssh solv@${t}

Failed Cmd: ln -sf ${re} ${Pa}`));return}if(console.log(Y.white("\u{1F7E2} Uploading the tower file to the new validator...")),Dt(`scp solv@${t}:${y}/tower-1_9-${o}.bin ${y}`,{shell:!0,stdio:"inherit"}).status!==0){console.log(Y.yellow(`\u26A0\uFE0F Upload Tower File Failed. Please check your tower file
$ ssh solv@${t}

Failed Cmd: scp solv@${t}:${y}/tower-1_9-${o}.bin ${y}`));return}if(console.log(Y.white("\u{1F7E2} Setting identity on the new validator...")),Dt(`${i} -l ${y} set-identity --require-tower ${a}`,{shell:!0,stdio:"inherit"}).status!==0){console.log(Y.yellow(`\u26A0\uFE0F Set Identity Failed. Please check your Validator

Failed Cmd: ${i} -l ${y} set-identity ${a}
ln -sf ${a} ${O}`));return}if(Dt(`ln -sf ${a} ${O}`,{shell:!0,stdio:"inherit"}).status!==0){console.log(Y.yellow(`\u26A0\uFE0F Chaning Identity Key Symlink Failed. Please check your Validator

Failed Cmd: ln -sf ${a} ${O}`));return}console.log(Y.white("\u{1F7E2} Identity changed successfully!")),await R({IS_DUMMY:!1})},"changeIdentityIncoming");import{join as Ka}from"path";import H from"chalk";import{spawnSync as Kt}from"node:child_process";var $a=Ka(C,ft),ed=Ka(C,ut),Da="~/.ssh/id_rsa",ba=r(async(t,o,e)=>{let n=e.NETWORK===u.TESTNET,s=e.NODE_TYPE===T.RPC,a=n?I:D;s&&(a=I);let i=K();if(!$t(a,t))return;let l=`${i} -l ${y} wait-for-restart-window --min-idle-time 2 --skip-new-snapshot-check`,p=`${i} -l ${y} set-identity ${$a}`,d=`ln -sf ${$a} ${ed}`,m=`scp ${y}/tower-1_9-${o}.bin solv@${t}:${y}`,f=`${i} -l ${y} set-identity --require-tower ${a}`,S=`ln -sf ${a} ${O}`;if(console.log(H.white("\u{1F7E2} Waiting for restart window...")),Kt(l,{shell:!0,stdio:"inherit"}).status!==0){console.log(H.yellow(`\u26A0\uFE0F wait-for-restart-window Failed. Please check your Validator

Failed Cmd: ${l}`));return}if(console.log(H.white("\u{1F7E2} Setting identity on the new validator...")),Kt(p,{shell:!0,stdio:"inherit"}).status!==0){console.log(H.yellow(`\u26A0\uFE0F set-identity Failed. Please check your Validator

Failed Cmd: ${p}`));return}if(console.log(H.white("\u{1F7E2} Changing the Symlink to the new validator keypair...")),Kt(d,{shell:!0,stdio:"inherit"}).status!==0){console.log(H.yellow(`\u26A0\uFE0F Symlink Failed. Please check your Validator

Failed Cmd: ${d}`));return}if(console.log(H.white("\u{1F7E2} Uploading the tower file to the new validator...")),Kt(m,{shell:!0,stdio:"inherit"}).status!==0){console.log(H.yellow(`\u26A0\uFE0F Upload Tower File Failed. Please check your Validator

Failed Cmd: ${m}`));return}console.log(H.white("\u{1F7E2} Setting identity on the new validator..."));let x=`ssh -i ${Da} -o StrictHostKeyChecking=no solv@${t} -p 22 'cd ~ && source ~/.profile && ${f}'`;Kt(x,{shell:!0,stdio:"inherit"}).status!==0&&console.log(H.yellow(`\u26A0\uFE0F set-identity Failed. Please check your Validator
$ ssh solv@${t}

Failed Cmd: ${f}`)),console.log(H.white("\u{1F7E2} Changing the Symlink to the new validator keypair..."));let Mt=`ssh -i ${Da} -o StrictHostKeyChecking=no solv@${t} -p 22 'cd ~ && source ~/.profile && ${S}'`;if(Kt(Mt,{shell:!0,stdio:"inherit"}).status!==0){console.log(H.yellow(`\u26A0\uFE0F Symlink Failed. Please check your Validator

Failed Cmd: ${S}`));return}console.log(H.white("\u{1F7E2} Identity changed successfully!")),await R({IS_DUMMY:!0})},"changeIdentityOutgoing");import{spawnSync as rd}from"node:child_process";function Ua(t){let o=`ssh -o BatchMode=yes -o ConnectTimeout=5 solv@${t} exit`;return rd(o,{shell:!0,stdio:"inherit"}).status===0}r(Ua,"checkSSHConnection");import io from"chalk";import{join as Ha}from"path";import{spawnSync as bt}from"node:child_process";import j from"chalk";var ne=Ha(C,ft),Ma=Ha(C,ut),Fa=r(async(t,o,e)=>{let n=e.NETWORK===u.TESTNET,s=e.NODE_TYPE===T.RPC,a=n?I:D;if(s&&(a=I),!$t(a,t))return;let c=Fe,l=Ye;console.log(j.white("\u{1F7E2} Waiting for restart window..."));let p=`ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no solv@${t} -p 22 'cd ~ && source ~/.profile && ${c} -l ${y} wait-for-restart-window --min-idle-time 2 --skip-new-snapshot-check'`;if(bt(p,{shell:!0,stdio:"inherit"}).status!==0){console.log(j.yellow(`\u26A0\uFE0F wait-for-restart-window Failed. Please check your Validator
$ ssh solv@${t}

Failed Cmd: ${c} -l ${y} wait-for-restart-window --min-idle-time 2 --skip-new-snapshot-check`));return}console.log(j.white("\u{1F7E2} Setting identity on the new validator..."));let m=`ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no solv@${t} -p 22 'cd ~ && source ~/.profile && ${c} -l ${y} set-identity ${ne}'`;if(bt(m,{shell:!0,stdio:"inherit"}).status!==0){console.log(j.yellow(`\u26A0\uFE0F Set Identity Failed. Please check your Validator
$ ssh solv@${t}

Failed Cmd: ${c} -l ${y} set-identity ${ne}`));return}if(console.log(j.white("\u{1F7E2} Changing the Symlink to the new validator keypair...")),bt(`ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no solv@${t} -p 22 'cd ~ && source ~/.profile && ln -sf ${ne} ${Ma}'`,{shell:!0,stdio:"inherit"}).status!==0){console.log(j.yellow(`\u26A0\uFE0F Chaning Identity Key Symlink Failed. Please check your Validator
$ ssh solv@${t}

Failed Cmd: ln -sf ${ne} ${Ma}`));return}if(console.log(j.white("\u{1F7E2} Uploading the tower file to the new validator...")),bt(`scp solv@${t}:${y}/tower-1_9-${o}.bin ${y}`,{shell:!0,stdio:"inherit"}).status!==0){console.log(j.yellow(`\u26A0\uFE0F Upload Tower File Failed. Please check your tower file
$ ssh solv@${t}

Failed Cmd: scp solv@${t}:${y}/tower-1_9-${o}.bin ${y}`));return}if(console.log(j.white("\u{1F7E2} Setting identity on the new validator...")),bt(`${l} -l ${y} set-identity --require-tower ${a}`,{shell:!0,stdio:"inherit"}).status!==0){console.log(j.yellow(`\u26A0\uFE0F Set Identity Failed. Please check your Validator

Failed Cmd: ${l} -l ${y} set-identity ${a}
ln -sf ${a} ${O}`));return}if(bt(`ln -sf ${a} ${O}`,{shell:!0,stdio:"inherit"}).status!==0){console.log(j.yellow(`\u26A0\uFE0F Chaning Identity Key Symlink Failed. Please check your Validator

Failed Cmd: ln -sf ${a} ${O}`));return}console.log(j.white("\u{1F7E2} Identity changed successfully!")),await R({IS_DUMMY:!1})},"changeIdentityIncomingV1toV2");var nd=["Incoming","Outgoing"],ja=r(async(t,o)=>{t.command("switch").option("--ip <ip>","IP Address of the New Validator","").option("--switchType <switchType>","Switch Type","").option("--v2-migrate-incoming","Switch V1 to V2 Incoming",!1).description("Switch Validator Identity with No Downtime").action(async e=>{try{let n=o.NETWORK===u.TESTNET,s=o.NODE_TYPE===T.RPC,a=n?I:D;s&&(a=I);let i=g(a),c=e.switchType,l=e.ip;if(c===""||l===""){let d=await Ya.prompt([{name:"switchType",type:"list",message:"Which switch type do you want to perform?",choices:["Incoming","Outgoing"]},{name:"ip",type:"input",message:"What is the IP address of the new validator?",default(){return"1.1.1.1"}}]);c=d.switchType,l=d.ip}if(!nd.includes(c)){console.log(io.yellow(`\u26A0\uFE0F Invalid Switch Type
You can choose only Incoming or Outgoing`));return}if(!Ua(l)){console.log("SSH Connection Failed");return}if(c==="Incoming"){if(e.v2MigrateIncoming){(await Ya.prompt([{name:"confirm",type:"confirm",message:"Are you sure you want to migrate V1 to V2 Incoming? This node must be running V2 and the remote node must be running V1."}])).confirm||(console.log(io.cyan("Exiting...\u{1F31B}")),process.exit(0)),console.log(io.white("\u{1F7E2} Migrating V1 to V2 Incoming...")),await Fa(l,i,o);return}await Va(l,i,o)}else await ba(l,i,o);process.exit(0)}catch(n){n.message.includes("User force closed the prompt")&&(console.error(io.cyan("Exiting...\u{1F31B}")),process.exit(0)),console.error(io.red(`Switch Error: ${n.message}`)),process.exit(0)}})},"switchCommand");import{spawnSync as sd}from"node:child_process";var ad=r((t="296877183",o=y)=>{try{let e=`agave-ledger-tool --ledger ${o} create-snapshot --incremental --snapshot-archive-path  ${o} --hard-fork ${t} --deactivate-feature-gate 7uZBkJXJ1HkuP6R3MJfZs7mLwymBcDbKdqbF51ZWLier tvcF6b1TRz353zKuhBjinZkKzjmihXmBAHJdjNYw1sQ decoMktMcnmiq6t3u7g5BfgcQu91nKZr6RvMYf9z1Jb --  ${t} ${o}`,n=sd(e,{shell:!0,stdio:"pipe",cwd:o});if(n.status!==0)throw new Error(`createSnapshot: ${n.error}`)}catch(e){throw new Error(`createSnapshot: ${e}`)}},"createSnapshot"),Ba=ad;import Ut from"inquirer";import hd from"dotenv";import At from"chalk";var se={SOL:{tokenMint:"So11111111111111111111111111111111111111112",associationAccount:"4Vwkpk3DTVrTGnUQTazsgQ1wxtU9QwZTmAXDaQRHg9Ra",decimal:9},USDC:{tokenMint:"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",associationAccount:"J8sqx9ZEoPRqboFAXK3c1R38zm41tRNJgUn2FzyeYQDj",decimal:6},elSOL:{tokenMint:ie,associationAccount:"",decimal:9},JitoSOL:{tokenMint:"J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn",associationAccount:"HPj87TFMPZfm5nk1HmTH9a382RXn7h9oWftiFr3Xs12a",decimal:9},mSOL:{tokenMint:"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",associationAccount:"8CX5tE9KvJ59HcoXwWf6tCZoRuz2JFSmunnbKC1ryaK9",decimal:9},bSOL:{tokenMint:"bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1",associationAccount:"782MdvLby3VfvKdfDYn9tX3DfNAtg7TcytNNFuepcoMH",decimal:9},EPCT:{tokenMint:"CvB1ztJvpYQPvdPBePtRzjL4aQidjydtUz61NWgcgQtP",associationAccount:"BhR2L6J5q3xF1TxReXyHjaUh4MF6qV99tMsipzPAKeB",decimal:6},JUP:{tokenMint:"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN",associationAccount:"212yg3Ev7khq4p1mESFGenF4nWefmkbC8f7mHM68j4vg",decimal:6},BONK:{tokenMint:"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263",associationAccount:"61Ndjv9392jPRVGALdYgjjxGYa6TT6Gn2WLDSsmugE6U",decimal:5},JTO:{tokenMint:"jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL",associationAccount:"2c9qVh8RQ6j2E2VdAEcCrRXMrd6g1vvPNZvAR6sbaGWo",decimal:9}},$e={So11111111111111111111111111111111111111112:{symbol:"SOL",tokenMint:fo,associationAccount:"4Vwkpk3DTVrTGnUQTazsgQ1wxtU9QwZTmAXDaQRHg9Ra",decimal:9},EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v:{symbol:"USDC",tokenMint:ho,associationAccount:"J8sqx9ZEoPRqboFAXK3c1R38zm41tRNJgUn2FzyeYQDj",decimal:6},ELSoL1owwMWQ9foMsutweCsMKbTPVBD9pFqxQGidTaMC:{symbol:"elSOL",tokenMint:ie,associationAccount:"",decimal:9},J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn:{symbol:"jitoSOL",tokenMint:"J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn",associationAccount:"HPj87TFMPZfm5nk1HmTH9a382RXn7h9oWftiFr3Xs12a",decimal:9},mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So:{symbol:"mSOL",tokenMint:"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",associationAccount:"8CX5tE9KvJ59HcoXwWf6tCZoRuz2JFSmunnbKC1ryaK9",decimal:9},bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1:{symbol:"bSOL",tokenMint:"bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1",associationAccount:"782MdvLby3VfvKdfDYn9tX3DfNAtg7TcytNNFuepcoMH",decimal:9},CvB1ztJvpYQPvdPBePtRzjL4aQidjydtUz61NWgcgQtP:{symbol:"EPCT",tokenMint:"CvB1ztJvpYQPvdPBePtRzjL4aQidjydtUz61NWgcgQtP",associationAccount:"BhR2L6J5q3xF1TxReXyHjaUh4MF6qV99tMsipzPAKeB",decimal:6},JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN:{symbol:"JUP",tokenMint:"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN",associationAccount:"212yg3Ev7khq4p1mESFGenF4nWefmkbC8f7mHM68j4vg",decimal:6},DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263:{symbol:"BONK",tokenMint:"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263",associationAccount:"61Ndjv9392jPRVGALdYgjjxGYa6TT6Gn2WLDSsmugE6U",decimal:5},jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL:{symbol:"JTO",tokenMint:"jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL",associationAccount:"2c9qVh8RQ6j2E2VdAEcCrRXMrd6g1vvPNZvAR6sbaGWo",decimal:9}};import{readFile as ld}from"fs/promises";import{Connection as md,Keypair as pd,VersionedTransaction as dd}from"@solana/web3.js";import U from"chalk";import ud from"inquirer";import fd from"dotenv";var id=r(async(t,o,e,n,s)=>{try{let a=`${t}/quote?inputMint=${e}&outputMint=${n}&amount=${s}`,i=await fetch(a,{method:"GET",headers:{"Content-Type":"application/json","x-api-key":o,Authorization:`Bearer ${o}`}});return i.status===429?"Too many requests, please try again later":i.status===401?"Unauthorized, please check your API key":await i.json()}catch(a){throw new Error(`Error getJupiterQuote: ${a}`)}},"getJupiterQuote"),Ja=id;var cd=r(async(t,o,e,n)=>{try{let s=e.outputMint,a,i=Qe[s];i?a={swapRequest:{quoteResponse:e,userPublicKey:n,feeAccount:i,dynamicComputeUnitLimit:!0,prioritizationFeeLamports:"auto",dynamicSlippage:{maxBps:300}}}:a={swapRequest:{quoteResponse:e,userPublicKey:n,dynamicComputeUnitLimit:!0,prioritizationFeeLamports:"auto",dynamicSlippage:{maxBps:300}}};let c=`${t}/swap`,l=await fetch(c,{method:"POST",headers:{"Content-Type":"application/json","x-api-key":o,Authorization:`Bearer ${o}`},body:JSON.stringify(a.swapRequest)});return l.status===429?"Too many requests, please try again later":await l.json()}catch(s){throw new Error(`Error postJupiterSwap: ${s}`)}},"postJupiterSwap"),Ga=cd;fd.config();var za=r(async(t,o,e,n,s,a,i,c=!0)=>{let l=new md(t,"confirmed"),p=await Ja(o,e,s,a,i);if(typeof p=="string"){p.includes("Unauthorized")&&(console.error(U.yellow(`\u26A0\uFE0F Invalid API key, please check your API key \u26A0\uFE0F
`)),console.log(U.white("Get Your API key \u{1F447}")),console.log(U.white(Ht+`
`)),process.exit(0));let co=`${U.yellow("\u26A0\uFE0F Too many requests, please try again later \u26A0\uFE0F")}

You can upgrade your API key to increase your rate limits.
Get Your API key \u{1F447}
Validators Solutions: ${Ht}
`;console.error(U.white(co)),process.exit(0)}let d=$e[s],m=$e[a],f=`\u{1F504} Swap Quote \u{1F504}

- \u{1F3E6} Input Token: ${d.symbol} (${s})
- \u{1F4B0} Input Amount: ${i/Math.pow(10,d.decimal)} ${d.symbol}

- \u{1F3E6} Output Token: ${m.symbol} (${a})
- \u{1F4B0} Output Amount: ${Number(p?.outAmount)/Math.pow(10,m.decimal)} ${m.symbol}

\u203B This quote is based on the current market rate and may change before the swap is completed.
`;console.log(U.white(f)),console.log(U.gray(`You can also swap using the following command: 
$ solv swap --input ${s} --output ${a} --amount ${i} --skip-confirm
`));let S=!1;c?S=(await ud.prompt([{type:"confirm",name:"confirm",message:"Do you want to proceed with the swap?",default:!1}])).confirm:(console.log(U.cyan("Skipping confirmation...")),S=!0),S||(console.log(U.yellow("\u26A0\uFE0F Swap cancelled")),process.exit(0)),p||process.exit(0);let w=JSON.parse(await ld(n,"utf8")),_=pd.fromSecretKey(new Uint8Array(Array.from(w))),N=await Ga(o,e,p,_.publicKey.toString());if(typeof N=="string"){N.includes("Unauthorized")&&(console.error(U.yellow(`\u26A0\uFE0F Invalid API key, please check your API key \u26A0\uFE0F
`)),console.log(U.white("Get Your API key \u{1F447}")),console.log(U.white(Ht+`
`)),process.exit(0));let co=`${U.yellow("\u26A0\uFE0F Too many requests, please try again later \u26A0\uFE0F")}

You can upgrade your API key to increase your rate limits.
Get Your API key \u{1F447}
Validators Solutions: ${Ht}
`;console.error(U.white(co)),process.exit(0)}let J=Buffer.from(N.swapTransaction,"base64"),x=dd.deserialize(J);x.sign([_]);let _t=x.serialize(),Mt=await l.sendRawTransaction(_t,{skipPreflight:!0,maxRetries:2}),De=x.message.recentBlockhash;return console.log(`Swapping...
Transaction ID: ${Mt}`),await l.confirmTransaction({blockhash:De,lastValidBlockHeight:N.lastValidBlockHeight,signature:Mt},"confirmed"),Mt},"swap");hd.config();var Wa=r(async(t,o)=>{t.command("swap").description("Swap tokens").option("-i, --input <input>","Input token mint","").option("-o, --output <output>","Output token mint","").option("-a, --amount <amount>","Input amount in lamports","0").option("-s, --skip-confirm","Skip confirmation",!1).option("-c, --init-config","Initialize config",!1).action(async e=>{try{await yd(o.RPC_URL,o.KEYPAIR_PATH,o.API_KEY,e.input,e.output,Number(e.amount),!e.skipConfirm,e.initConfig)}catch(n){n.message.includes("User force closed the prompt")&&(console.error(At.cyan("Exiting...\u{1F31B}")),process.exit(0)),console.error(At.red(`Swap Error: ${n.message}`)),process.exit(0)}})},"swapCommand"),yd=r(async(t,o,e,n="",s="",a=0,i=!0,c=!1)=>{console.log(At.white("Solana RPC URL:",t)),console.log(At.white("KeyfilePath:",o)),(!o||o===""||c)&&await Sd();let l=ze,p=[...We,"Other"],d=n,m="",f=s,S=a;if(d===""){let N=await Ut.prompt([{type:"list",name:"name",message:"Select input mint",choices:p,default:fo}]);N.name==="Other"?d=(await Ut.prompt([{type:"input",name:"address",message:"Enter input mint address",default:ho}])).address:(m=N.name,d=se[m].tokenMint)}if(f===""){p=p.filter(x=>x!==m);let N=await Ut.prompt([{type:"list",name:"name",message:"Select output mint",choices:p}]);if(N.name==="Other")f=(await Ut.prompt([{type:"input",name:"address",message:"Enter output mint address",default:Q}])).address;else{let x=N.name;f=se[x].tokenMint}let J=N.name;f=se[J].tokenMint}if(S===0){let N=await Ut.prompt([{type:"input",name:"amount",message:"Enter input amount in LAMPORTS. e.g. 0.01 SOL",default:"10000000"}]);S=Number(N.amount)}let _=await za(t,l,!e||e===""?qe:e,o,d,f,S,i);_||process.exit(0),console.log(At.green("\u2714\uFE0E Sent Tx Successfully!")),console.log(At.white(`Check Your TX \u{1F449}: https://solscan.io/tx/${_}`))},"swapCmd");var Sd=r(async()=>{let t=await Ut.prompt([{type:"input",name:"RPC_URL",message:"Enter Solana RPC URL",default:"https://api.mainnet-beta.solana.com"},{type:"input",name:"KEYPAIR_PATH",message:"Enter Keypair Path",default:"/home/solv/mainnet-validator-keypair.json"},{type:"input",name:"API_KEY",message:"Enter Jupiter API Key(Optional)",default:""}]);await R(t),console.log(At.green(`\u2714\uFE0E Config Updated Successfully!
`)),Et()},"askForConfig");import{spawnSync as Td}from"node:child_process";var qa=r(()=>{Td("sudo systemctl status jupiter-api.service",{shell:!0,stdio:"inherit"})},"jupiterStatus");import{spawnSync as Ed}from"node:child_process";var Qa=r(()=>{Ed("sudo systemctl start jupiter-api.service",{shell:!0,stdio:"inherit"})},"jupiterStart");import{spawnSync as gd}from"node:child_process";var Xa=r(()=>{gd("sudo systemctl stop jupiter-api.service",{shell:!0,stdio:"inherit"})},"jupiterStop");import{spawnSync as wd}from"node:child_process";var Za=r(()=>{wd("sudo systemctl restart jupiter-api.service",{shell:!0,stdio:"inherit"})},"jupiterRestart");import{spawnSync as Ad}from"node:child_process";var ti=r((t=!1)=>{Ad(t?"journalctl -u jupiter-api.service -xef | grep ERROR":"journalctl -u jupiter-api.service -xef",{shell:!0,stdio:"inherit"})},"jupiterLog");import{spawnSync as _d}from"node:child_process";var oi=r(()=>{_d("sudo systemctl enable jupiter-api.service",{shell:!0,stdio:"inherit"})},"jupiterEnable");var ei=r(()=>{let t=h.command("jupiter").description("Jupiter API Commands");t.command("status").description("Show Jupiter Status").action(()=>{qa()}),t.command("start").description("Start Jupiter").action(()=>{Qa()}),t.command("stop").description("Stop Jupiter").action(()=>{Xa()}),t.command("log").option("-e, --error","Show Error Logs",!1).description("Show Jupiter Logs").action(o=>{ti(o.error),process.exit(0)}),t.command("restart").description("Restart Jupiter").action(()=>{Za()}),t.command("enable").description("Enable Jupiter").action(()=>{oi()})},"jupiterCommands");import Od from"chalk";var h=new Nd;h.name("solv").description("\u{1FA84}  solv - Solana Validator Tool \u2728").helpOption("-h, --help","Display help for command").version(lo,"-V","Display version");async function vd(){try{let t=await $();Fn(t),Jn(t),jn(t),is(t),Mr(t),Fr(),Gn(t),Os(t),Cs(t),as(),qn(),Un(t),Us(t),zn(),Ds(),Js(t),Ws(t),Sa(t),Hn(),Wa(h,t),Ca(t),ja(h,t),ei(),h.command("rm:log").description("Remove Logs").action(()=>{Ms()}),h.command("rm:snapshot").description("Remove Snapshot").action(()=>{Fs()}),h.command("create:snapshot").description("Create Snapshot").option("-s, --slot <slot>","Slot").option("-l, --ledger <ledger>","Ledger").action(o=>{console.log(Od.white("\u{1F4DD} Creating Snapshot...")),Ba(o.slot,o.ledger)}),h.command("monitor").alias("m").description("Monitor Solana Node").action(()=>{Ys(t)}),h.command("catchup").description("Check Solana Catchup Status").alias("c").alias("ca").action(()=>{js()}),h.command("config").description("Show Solv Config").action(()=>{Wo()}),h.command("vv").description("Show Solv Version").action(()=>{let o=Ot();console.log("version:",o)}),await h.addHelpCommand("help [cmd]","Display help for command").parseAsync(process.argv),process.exit(0)}catch(t){console.log(t),process.exit(0)}}r(vd,"main");vd();export{h as program};
//# sourceMappingURL=index.js.map